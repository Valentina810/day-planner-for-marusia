{
	"info": {
		"_postman_id": "327fbffb-56a8-4d7b-a15e-2bc54d7f1d4d",
		"name": "Marusia_APi",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "6122415"
	},
	"item": [
		{
			"name": "1. Базовые_запросы",
			"item": [
				{
					"name": "1.1 Запуск",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1. Проверка главного сообщения text, end_session\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверка наличия объекта\r",
									"    pm.expect(jsonData).to.have.property('response');\r",
									"    \r",
									"    // Проверка, что объект_тест является объектом\r",
									"    pm.expect(jsonData.response).to.be.an('object');\r",
									"    \r",
									"    // Проверка наличия ключа внутри объекта\r",
									"    pm.expect(jsonData.response).to.have.property('text');\r",
									"    pm.expect(jsonData.response).to.have.property('end_session');\r",
									"    \r",
									"    // Проверка значения ключа внутри объекта\r",
									"    pm.expect(jsonData.response.text).to.eql('Вас приветствует навык Планировщик недели! У меня есть команды: план на неделю, план на сегодня, план на завтра, добавь событие, справка и выход');\r",
									"     pm.expect(jsonData.response.end_session).to.eql(false);\r",
									"    });\r",
									"\r",
									"//-------------------------------------------------------------------------------\r",
									"pm.test(\"2. Значение message_id внутри 'session'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие объекта 'session' в ответе\r",
									"    pm.expect(jsonData).to.have.property('session');\r",
									"    \r",
									"    // Проверяем наличие message_id'\r",
									"    pm.expect(jsonData.session).to.have.property('message_id');\r",
									"    \r",
									"    // Проверяем значение message_id\r",
									"    pm.expect(jsonData.session.message_id).to.equal(0);\r",
									"});\r",
									"\r",
									"//-------------------------------------------------------------------------------\r",
									"pm.test(\"3. Проверка'days' {}\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие user_state_update в ответе\r",
									"    pm.expect(jsonData).to.have.property('user_state_update');\r",
									"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие week внутри user_state_update\r",
									"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
									"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие days внутри week\r",
									"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
									"\r",
									"    // Проверяем, что days является пустым объектом\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object').that.is.empty;   \r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"запусти skill планировщик недели\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\n        \"message_id\": 0\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {\n            \"week\": {\n                \"days\": {\n                    \"08-07-2024\": [\n                        {\n                            \"name\": \"тестовое событие для тестиргггггггггггггггггггггггоания навыка Маруси\",\n                            \"time\": \"20:00\"\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"version\": \"1.0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{stand}}webhook"
					},
					"response": []
				},
				{
					"name": "1.2 Выход",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1. Проверка text\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверка наличия объекта\r",
									"    pm.expect(jsonData).to.have.property('response');\r",
									"    \r",
									"    // Проверка, что объект_тест является объектом\r",
									"    pm.expect(jsonData.response).to.be.an('object');\r",
									"    \r",
									"    // Проверка наличия ключа внутри объекта\r",
									"    pm.expect(jsonData.response).to.have.property('text');\r",
									"    pm.expect(jsonData.response).to.have.property('end_session');\r",
									"    \r",
									"    // Проверка значения ключа внутри объекта\r",
									"    pm.expect(jsonData.response.text).to.eql('Планировщик недели прощается с вами! До свидания!');\r",
									"    pm.expect(jsonData.response.end_session).to.eql(true);\r",
									"    });\r",
									"//-------------------------------------------------------------------------------\r",
									"    pm.test(\"2. Значение ключа 'message_id' внутри 'session' равно 0\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие объекта 'session' в ответе\r",
									"    pm.expect(jsonData).to.have.property('session');\r",
									"    \r",
									"    // Проверяем наличие ключа 'message_id' внутри 'session'\r",
									"    pm.expect(jsonData.session).to.have.property('message_id');\r",
									"    \r",
									"    // Проверяем, что значение 'message_id' равно 0\r",
									"    pm.expect(jsonData.session.message_id).to.equal(0); \r",
									"\r",
									"});\r",
									"//-------------------------------------------------------------------------------\r",
									"pm.test(\"3. Проверка'days' {}\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие user_state_update в ответе\r",
									"    pm.expect(jsonData).to.have.property('user_state_update');\r",
									"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие week внутри user_state_update\r",
									"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
									"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие days внутри week\r",
									"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
									"\r",
									"    // Проверяем, что days является пустым объектом\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object').that.is.empty;   \r",
									"   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"выход\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\n        \"message_id\": 0\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {\n            \"week\": {\n                \"days\": {\n                    \"08-07-2024\": [\n                        {\n                            \"name\": \"тестовое событие для тестирования голосового навыка\",\n                            \"time\": \"18:00\"\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"version\": \"1.0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{stand}}webhook"
					},
					"response": []
				},
				{
					"name": "1.3 Добавь_событие_state",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1. Проверка text\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверка наличия объекта\r",
									"    pm.expect(jsonData).to.have.property('response');\r",
									"    \r",
									"    // Проверка, что объект_тест является объектом\r",
									"    pm.expect(jsonData.response).to.be.an('object');\r",
									"    \r",
									"    // Проверка наличия ключа внутри объекта\r",
									"    pm.expect(jsonData.response).to.have.property('text');\r",
									"    pm.expect(jsonData.response).to.have.property('end_session');\r",
									"    \r",
									"    // Проверка значения ключа внутри объекта\r",
									"    pm.expect(jsonData.response.text).to.eql('Назовите день, например, среда ');\r",
									"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
									"    });\r",
									"\r",
									"//-------------------------------------------------------------------------------\r",
									"pm.test(\"2. Значение ключа 'message_id' внутри 'session' равно 8\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие объекта 'session' в ответе\r",
									"    pm.expect(jsonData).to.have.property('session');\r",
									"    \r",
									"    // Проверяем наличие ключа 'message_id' внутри 'session'\r",
									"    pm.expect(jsonData.session).to.have.property('message_id');\r",
									"    \r",
									"    // Проверяем, что значение 'message_id' равно 8\r",
									"    pm.expect(jsonData.session.message_id).to.equal(8);\r",
									"\r",
									"});\r",
									"\r",
									"//-------------------------------------------------------------------------------\r",
									"pm.test(\"3. Проверка 'prevActions' -> 'number', 'operation', 'valueAction' \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // Дополнительные проверки значений\r",
									"    if (jsonData.session_state.actions.prevActions[0].number !== 0) {\r",
									"        console.log(\"Ошибка: ожидалось значение 0 для number, но получено\", jsonData.session_state.actions.prevActions[0].number);\r",
									"    }\r",
									"    if (jsonData.session_state.actions.prevActions[0].operation !== \"ADD_EVENT\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'ADD_EVENT' для operation, но получено\", jsonData.session_state.actions.prevActions[0].operation);\r",
									"    }\r",
									"    if (jsonData.session_state.actions.prevActions[0].valueAction !== \"добавь событие\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'добавь событие' для valueAction, но получено\", jsonData.session_state.actions.prevActions[0].valueAction);\r",
									"    }\r",
									"\r",
									"    // Проверяем наличие session_state в ответе\r",
									"    pm.expect(jsonData).to.have.property('session_state');\r",
									"    pm.expect(jsonData.session_state).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие actions внутри session_state\r",
									"    pm.expect(jsonData.session_state).to.have.property('actions');\r",
									"    pm.expect(jsonData.session_state.actions).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие prevActions внутри actions\r",
									"    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');\r",
									"    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');\r",
									"\r",
									"    // Проверяем, что prevActions не пустой\r",
									"    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);\r",
									"\r",
									"    // Проверяем значения number, operation и valueAction\r",
									"    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);\r",
									"    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal(\"ADD_EVENT\");\r",
									"    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal(\"добавь событие\");\r",
									"\r",
									"});\r",
									"//-------------------------------------------------------------------------------\r",
									"pm.test(\"4. Проверка структуры ответа и значений в user_state_update\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"     // Дополнительные проверки значений\r",
									"    if (jsonData.user_state_update.week.days[\"01-07-2024\"][0].time !== \"01:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[\"01-07-2024\"][0].time);\r",
									"    }\r",
									"    if (jsonData.user_state_update.week.days[\"01-07-2024\"][0].name !== \"событие\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'событие1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[\"01-07-2024\"][0].name);\r",
									"    }\r",
									"    if (jsonData.user_state_update.week.days[\"01-07-2024\"][1].name !== \"план на неделю\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'план на неделю' для name во втором элементе, но получено\", jsonData.user_state_update.week.days[\"01-07-2024\"][1].name);\r",
									"    }\r",
									"    if (jsonData.user_state_update.week.days[\"01-07-2024\"][1].time !== \"02:02\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '02:02' для time во втором элементе, но получено\", jsonData.user_state_update.week.days[\"01-07-2024\"][1].time);\r",
									"    }\r",
									"\t if (jsonData.user_state_update.week.days[\"01-07-2024\"][2].name !== \"добавь событие\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'добавь событие' для name в третьем элементе, но получено\", jsonData.user_state_update.week.days[\"01-07-2024\"][2].name);\r",
									"    }\r",
									"    if (jsonData.user_state_update.week.days[\"01-07-2024\"][2].time !== \"15:33\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '15:33' для time в третьем элементе, но получено\", jsonData.user_state_update.week.days[\"01-07-2024\"][2].time);\r",
									"    }\r",
									"\r",
									"    // Проверяем наличие и тип user_state_update\r",
									"    pm.expect(jsonData).to.have.property('user_state_update');\r",
									"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип object3 внутри user_state_update\r",
									"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
									"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип days внутри week\r",
									"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип 01-07-2024 внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property('01-07-2024');\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"01-07-2024\"]).to.be.an('array');\r",
									"\r",
									"    // Проверяем, что \"01-07-2024\" содержит 3 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"01-07-2024\"]).to.have.lengthOf(3);\r",
									"\r",
									"    // Проверяем первый элемент \"01-07-2024\"\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"01-07-2024\"][0]).to.have.property('time', \"01:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"01-07-2024\"][0]).to.have.property('name', \"событие\");\r",
									"\r",
									"    // Проверяем второй элемент \"01-07-2024\"\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"01-07-2024\"][1]).to.have.property('time', \"02:02\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"01-07-2024\"][1]).to.have.property('name', \"план на неделю\");\r",
									"\r",
									"    // Проверяем третий элемент \"01-07-2024\"\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"01-07-2024\"][2]).to.have.property('time', \"15:33\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"01-07-2024\"][2]).to.have.property('name', \"добавь событие\"); \r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"добавь событие\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\n        \"message_id\": 8\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {\n            \"week\": {\n                \"days\": {\n                    \"01-07-2024\": [\n                        {\n                            \"name\": \"событие\",\n                            \"time\": \"01:00\"\n                        },\n                        {\n                            \"name\": \"план на неделю\",\n                            \"time\": \"02:02\"\n                        },\n                        {\n                            \"name\": \"добавь событие\",\n                            \"time\": \"15:33\"\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"version\": \"1.0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{stand}}webhook"
					},
					"response": []
				},
				{
					"name": "1.4 Справка",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1. Проверка text\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверка наличия объекта\r",
									"    pm.expect(jsonData).to.have.property('response');\r",
									"    \r",
									"    // Проверка, что объект_тест является объектом\r",
									"    pm.expect(jsonData.response).to.be.an('object');\r",
									"    \r",
									"    // Проверка наличия ключа внутри объекта\r",
									"    pm.expect(jsonData.response).to.have.property('text');\r",
									"    pm.expect(jsonData.response).to.have.property('end_session');\r",
									"    \r",
									"    // Проверка значения ключа внутри объекта\r",
									"    pm.expect(jsonData.response.text).to.eql('Мои команды: план на неделю, план на сегодня, план на завтра, добавь событие и справка. Чтобы выйти из навыка скажите выход.');\r",
									"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
									"    });\r",
									"\r",
									"//-------------------------------------------------------------------------------\r",
									"    pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие объекта 'session' в ответе\r",
									"    pm.expect(jsonData).to.have.property('session'); \r",
									"   \r",
									"    // Проверяем наличие ключей внутри 'session'\r",
									"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
									"\t\r",
									"    // Проверяем, что значение ключей\r",
									"\t pm.expect(jsonData.session.message_id).to.equal(1);\r",
									"    \r",
									"});\r",
									"//-------------------------------------------------------------------------------\r",
									"    pm.test(\"3. Проверка отсутствия user_state_update\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.not.have.property('user_state_update');\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"original_utterance\": \"справка\",\n        \"nlu\": {\n            \"entities\": [],\n            \"tokens\": [\n                \"справка\"\n            ]\n        },\n        \"type\": \"SimpleUtterance\",\n        \"command\": \"справка\"\n    },\n    \"meta\": {\n        \"interfaces\": {\n            \"screen\": {}\n        },\n        \"timezone\": \"Europe\\/Moscow\",\n        \"_city_ru\": \"Краснодар\",\n        \"locale\": \"ru_RU\",\n        \"client_id\": \"MailRu-VC\\/1.0\"\n    },\n    \"session\": {\n        \"new\": false,\n        \"application\": {\n            \"application_type\": \"web\",\n            \"application_id\": \"87837\"\n        },\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\n        \"skill_id\": \"52401ef1\",\n        \"message_id\": 1,\n        \"auth_token\": \"636\",\n        \"user\": {\n            \"user_id\": \"9fc847e3\"\n        }\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{stand}}webhook"
					},
					"response": []
				},
				{
					"name": "1.5 Неизвестная_команда",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"1. Проверка text\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // Проверка наличия объекта\r",
									"    pm.expect(jsonData).to.have.property('response');\r",
									"\r",
									"    // Проверка, что объект_тест является объектом\r",
									"    pm.expect(jsonData.response).to.be.an('object');\r",
									"\r",
									"    // Проверка наличия ключа внутри объекта\r",
									"    pm.expect(jsonData.response).to.have.property('text');\r",
									"    pm.expect(jsonData.response).to.have.property('end_session');\r",
									"     \r",
									"    // Проверка значения ключа внутри объекта\r",
									"    pm.expect(jsonData.response.text).to.eql('Получена неизвестная команда! Используйте команду справка для того чтобы узнать мои команды');\r",
									"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
									"});\r",
									"//-------------------------------------------------------------------------------\r",
									"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // Проверяем наличие объекта 'session' в ответе\r",
									"    pm.expect(jsonData).to.have.property('session');\r",
									"\r",
									"    // Проверяем наличие ключей внутри 'session'\r",
									"    pm.expect(jsonData.session).to.have.property('message_id');\r",
									"\r",
									"    // Проверяем, что значение ключей\r",
									"    pm.expect(jsonData.session.message_id).to.equal(1);\r",
									"\r",
									"});\r",
									"//-------------------------------------------------------------------------------\r",
									"    pm.test(\"3. Проверка отсутствия user_state_update\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.not.have.property('user_state_update');\r",
									"    });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"original_utterance\": \"справка\",\n        \"nlu\": {\n            \"entities\": [],\n            \"tokens\": [\n                \"справка\"\n            ]\n        },\n        \"type\": \"SimpleUtterance\",\n        \"command\": \"привет\"\n    },\n    \"meta\": {\n        \"interfaces\": {\n            \"screen\": {}\n        },\n        \"timezone\": \"Europe\\/Moscow\",\n        \"_city_ru\": \"Краснодар\",\n        \"locale\": \"ru_RU\",\n        \"client_id\": \"MailRu-VC\\/1.0\"\n    },\n    \"session\": {\n        \"new\": false,\n        \"application\": {\n            \"application_type\": \"web\",\n            \"application_id\": \"87837\"\n        },\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"skill_id\": \"52401ef1\",\n        \"message_id\": 1,\n        \"auth_token\": \"636\",\n        \"user\": {\n            \"user_id\": \"9fc847e3\"\n        }\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{stand}}webhook"
					},
					"response": []
				},
				{
					"name": "1.6  План_сегодня_1events",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var date = new Date();\r",
									"var day = String(date.getDate()).padStart(2, '0');\r",
									"var month = String(date.getMonth() + 1).padStart(2, '0'); // Январь - это 0!\r",
									"var year = date.getFullYear();\r",
									"\r",
									"var formattedDate = day + '-' + month + '-' + year;\r",
									"\r",
									"pm.variables.set(\"currentDate\", formattedDate);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Генерация текущей даты в формате DD-MM-YYYY\r",
									"\r",
									"function generateCurrentDate() {\r",
									"    var currentDate = new Date();\r",
									"    var day = String(currentDate.getDate()).padStart(2, '0');\r",
									"    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!\r",
									"    var year = currentDate.getFullYear();\r",
									"    return day + '-' + month + '-' + year;\r",
									"}\r",
									"// --------------------------------------------------------------------------\r",
									"pm.test(\"1. Проверка text с currentDate\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var formattedDate = generateCurrentDate()\r",
									"\r",
									"    // Создание регулярного выражения с текущей датой\r",
									"    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + \" 00:00 тест событие 1\");\r",
									"\r",
									"    // Проверка наличия объекта\r",
									"    pm.expect(jsonData).to.have.property('response');\r",
									"\r",
									"    // Проверка, что response является объектом\r",
									"    pm.expect(jsonData.response).to.be.an('object');\r",
									"\r",
									"    // Проверка наличия ключа внутри объекта\r",
									"    pm.expect(jsonData.response).to.have.property('text');\r",
									"    pm.expect(jsonData.response).to.have.property('end_session');\r",
									"\r",
									"    // Проверка значения ключа внутри объекта\r",
									"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
									"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
									"\r",
									"});\r",
									"//-------------------------------------------------------------------------------\r",
									"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие объекта 'session' в ответе\r",
									"    pm.expect(jsonData).to.have.property('session'); \r",
									"   \r",
									"    // Проверяем наличие ключей внутри 'session'\r",
									"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
									"\t\r",
									"    // Проверяем, что значение ключей\r",
									"\t pm.expect(jsonData.session.message_id).to.equal(4);\r",
									"    \r",
									"});\r",
									"//------------------------------------------------------------------------------\r",
									"\r",
									"pm.test(\"3. Проверка user_state_update\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var formattedDate = generateCurrentDate()\r",
									"\r",
									"    // Дополнительные проверки значений\r",
									"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
									"    }\r",
									"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
									"    }\t\r",
									"    \r",
									"    // Проверяем наличие и тип user_state_update\r",
									"    pm.expect(jsonData).to.have.property('user_state_update');\r",
									"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип object3 внутри user_state_update\r",
									"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
									"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип days внутри week\r",
									"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
									"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
									"\r",
									"    // Проверяем, что formattedDate содержит 1 элемент\r",
									"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
									"\r",
									"    // Проверяем первый элемент formattedDate\r",
									"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");  \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"план на сегодня\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 4\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {\n            \"week\": {\n                \"days\": {\n                    \"{{currentDate}}\": [\n                        {\n                            \"time\": \"00:00\",\n                            \"name\": \"тест событие 1\"\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"version\": \"1.0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{stand}}webhook"
					},
					"response": []
				}
			]
		},
		{
			"name": "2. Добавление_события",
			"item": [
				{
					"name": "2.1 Проверка_дня",
					"item": [
						{
							"name": "2.1.1  ADD_EVENT_today",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Генерация текущей даты в формате DD-MM-YYYY\r",
											"\r",
											"function generateCurrentDate() {\r",
											"    var currentDate = new Date();\r",
											"    var day = String(currentDate.getDate()).padStart(2, '0');\r",
											"    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!\r",
											"    var year = currentDate.getFullYear();\r",
											"    return day + '-' + month + '-' + year;\r",
											"}\r",
											"// --------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text с currentDate\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var formattedDate = generateCurrentDate()\r",
											"\r",
											"    // Создание регулярного выражения с текущей датой\r",
											"    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка наличия объекта\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session'); \r",
											"   \r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
											"\t\r",
											"    // Проверяем, что значение ключей\r",
											"\t pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"    \r",
											"});\r",
											"//------------------------------------------------------------------------------\r",
											"\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var formattedDate = generateCurrentDate()\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\t\r",
											"    \r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");  \r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"сегодня\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"ноль часов ноль\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.1.2  ADD_EVENT_tomorrow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Генерация текущей даты в формате DD-MM-YYYY\r",
											"\r",
											"function generateCurrentDate() {\r",
											"    var currentDate = new Date();\r",
											"    var day = String(currentDate.getDate()).padStart(2, '0');\r",
											"    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!\r",
											"    var year = currentDate.getFullYear();\r",
											"    return day + '-' + month + '-' + year;\r",
											"}\r",
											"// --------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text с currentDate\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var formattedDate = generateCurrentDate()\r",
											"\r",
											"    // Создание регулярного выражения с текущей датой\r",
											"    var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка наличия объекта\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session'); \r",
											"   \r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
											"\t\r",
											"    // Проверяем, что значение ключей\r",
											"\t pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"    \r",
											"});\r",
											"//------------------------------------------------------------------------------\r",
											"\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    var formattedDate = generateCurrentDate()\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\t\r",
											"    \r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");  \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"завтра\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"ноль часов ноль\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.1.3 ADD_EVENT_mon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"понедельник\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"ноль часов ноль\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.1.4 ADD_EVENT_tue",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"вторник\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"ноль часов ноль\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.1.5 ADD_EVENT_wed",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"среда\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"ноль часов ноль\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.1.6 ADD_EVENT_thu",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"четверг\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"ноль часов ноль\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.1.7 ADD_EVENT_fri",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"пятница\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"ноль часов ноль\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.1.8 ADD_EVENT_sat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"суббота\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"ноль часов ноль\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.1.9 ADD_EVENT_san",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"ноль часов ноль\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						}
					]
				},
				{
					"name": "2.2 Проверка_времени",
					"item": [
						{
							"name": "2.2.1  ADD_EVENT_00:00",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"ноль часов ноль\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.2 ADD_EVENT_01:01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 01:01 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"01:01\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '01:01' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"01:01\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"один час одна минута\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.3 ADD_EVENT_02:02",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 02:02 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"02:02\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '02:02' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"02:02\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"два часа две\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.4 ADD_EVENT_03:03",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 03:03 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"03:03\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '03:03' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"03:03\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"три часа три минуты\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.5 ADD_EVENT_04:04",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 04:04 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"04:04\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '04:04' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"04:04\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"четыре часа четыре минуты\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.6 ADD_EVENT_05:05",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 05:05 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"05:05\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '05:05' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"05:05\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"пять часов пять минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.7 ADD_EVENT_06:06",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 06:06 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"06:06\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '06:06' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"06:06\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"шесть часов шесть минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.8 ADD_EVENT_07:07",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 07:07 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"07:07\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '07:07' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"07:07\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"семь часов семь минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.9  ADD_EVENT_08:08",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 08:08 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"08:08\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '08:08' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"08:08\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"восемь часов восемь\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.10 ADD_EVENT_09:09",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 09:09 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"09:09\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '09:09' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"09:09\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"девять часов девять минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.11 ADD_EVENT_10:10",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 10:10 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"10:10\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '10:10' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"10:10\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"десять часов десять минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.12 ADD_EVENT_11:11",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 11:11 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"11:11\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '11:11' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"11:11\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"одиннадцать часов одиннадцать минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.13 ADD_EVENT_12:12",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 12:12 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"12:12\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '12:12' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"12:12\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"двенадцать часов двенадцать минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.14 ADD_EVENT_ 13:13",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 13:13 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"13:13\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '13:13' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"13:13\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"тринадцать часов тринадцать минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.15 ADD_EVENT_14:14",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 14:14 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"14:14\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '14:14' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"14:14\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"четырнадцать часов четырнадцать минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.16 ADD_EVENT_15:15",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 15:15 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"15:15\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '15:15' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"15:15\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"пятнадцать часов пятнадцать минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.17 ADD_EVENT_16:16",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//-------------------------------------------------------------------------------\r",
											"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session'); \r",
											"   \r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
											"\t\r",
											"    // Проверяем, что значение ключей\r",
											"\t pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"    \r",
											"});\r",
											"\r",
											"//-------------------------------------------------------------------------------"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"шестнадцать часов шестнадцать\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.18 ADD_EVENT_17:17",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 17:17 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"17:17\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '17:17' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"17:17\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"семнадцать часов семнадцать минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.19ADD_EVENT_18:18",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 18:18 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"18:18\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '18:18' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"18:18\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"восемнадцать часов восемнадцать минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.20ADD_EVENT_19:19",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 19:19 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"19:19\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '19:19' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"19:19\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"девятнадцать часов девятнадцать минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.21 ADD_EVENT_20:20",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 20:20 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"20:20\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '20:20' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"20:20\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"двадцать часов двадцать\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.22 ADD_EVENT_21:21",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 21:21 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"21:21\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '21:21' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"21:21\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"двадцать один час двадцать одна\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.23 ADD_EVENT_22:22",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 22:22 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"22:22\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '22:22' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"22:22\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"двадцать два часа двадцать две минуты\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.24 ADD_EVENT_23:23",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 23:23 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"23:23\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '23:23' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"23:23\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"двадцать три часа двадцать три минуты\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.25 ADD_EVENT_23:30",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 23:30 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"23:30\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '23:30' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"23:30\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"двадцать три часа тридцать минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.26 ADD_EVENT_23:31",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 23:31 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"23:21\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '23:21' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"23:31\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"двадцать три часа тридцать одна минута\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.27 ADD_EVENT_23:40",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 23:40 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"23:40\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '23:40' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"23:40\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"двадцать три часа сорок минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.28 ADD_EVENT_23:42",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 23:42 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"23:42\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '23:42' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"23:42\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"двадцать три часа сорок две минуты\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.29 ADD_EVENT_23:50",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 23:50 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"23:50\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '23:50' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"23:50\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"двадцать три часа пятьдесят минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.30 ADD_EVENT_23:53",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 23:53 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"23:53\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '23:53' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"23:53\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"двадцать три часа пятьдесят три минуты\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.31 ADD_EVENT_ 00:_",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"ноль\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.32 ADD_EVENT_00:05",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:05 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:05\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:05' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:05\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"ноль часов пять\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.33 ADD_EVENT_00:00",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"ноль часов ноль минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.34 ADD_EVENT_ 00:00_2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"ноль ноль часов ноль ноль минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.35 ADD_EVENT_00:58",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:58 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:58\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:58' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:58\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"ноль часов пятьдесят восемь минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.36 ADD_EVENT_00:59",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:59 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:59\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:59' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:59\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"ноль часов пятьдесят девять минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.37 ADD_EVENT_23:00",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 23:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"23:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '23:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"23:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"двадцать три часа ноль минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.38 ADD_EVENT_23:01",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 23:01 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"23:01\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '23:01' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"23:01\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"двадцать три часа одна минута\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.39ADD_EVENT_23:02",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 23:02 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"23:02\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '23:02' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"23:02\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"двадцать три часа две минуты\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.40 ADD_EVENT_23:58",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 23:58 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"23:58\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '23:58' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"23:58\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"двадцать три часа пятьдесят восемь\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.41 ADD_EVENT_23:59",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 23:59 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"23:59\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '23:59' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"23:59\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"двадцать три часа пятьдесят девять\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.42 ADD_EVENT_time_\"\"",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.43 ADD_EVENT_01:00",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 01:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"01:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"01:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"один\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.44 ADD_EVENT_09:00_morn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 09:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"09:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '09:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"09:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"девять утра\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.45 ADD_EVENT_09:00_even",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 09:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"09:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '09:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"09:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"девять вечера\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.46 ADD_EVENT_00:00_noon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"полдень\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.47 ADD_EVENT_hour",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"час\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.48 ADD_EVENT_minute",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"минута\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.49 ADD_EVENT_00h:_",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n         \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"ноль часов\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.50 ADD_EVENT_00:00_minuts",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"минута\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.51 ADD_EVENT_hour_1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"час\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.52 ADD_EVENT_8h",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 08:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"08:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '08:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"08:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"восемь часов\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.53 ADD_EVENT_9m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 09:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"09:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '09:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"09:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"девять минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.54 ADD_EVENT_1h",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 01:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"01:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"01:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"один час\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.55 ADD_EVENT_2m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 02:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"02:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '02:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"02:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"две минуты\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.56 ADD_EVENT_2h",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 02:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"02:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '02:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"02:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"два часа\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.57 ADD_EVENT_41m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"сорок одна минута\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.58 ADD_EVENT_30h",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"тридцать часов\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.59 ADD_EVENT_62m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 02:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"02:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '02:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"02:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"шестьдесят две минуты\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.60 ADD_EVENT_60m",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"шестьдесят минут\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.61 ADD_EVENT_midn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"полночь\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.61 ADD_EVENT_24h",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"двадцать четыре часа\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.62 ADD_EVENT_20h",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 20:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"20:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '20:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"20:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"двадцать часов\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.63 ADD_EVENT_десять дня",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 10:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"10:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '10:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"10:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"десять дня\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.64 ADD_EVENT_десять вечера",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 10:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"10:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '10:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"10:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"десять дня\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.65 ADD_EVENT_time час",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"час\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.2.66 ADD_EVENT_час минута",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											" // Функция для получения следующей даты определенного дня недели\r",
											"function getNextDateByDay(dayName) {\r",
											"    const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"    const today = new Date();\r",
											"    const dayIndex = days.indexOf(dayName);\r",
											"    if (dayIndex === -1) return null;\r",
											"    \r",
											"    const targetDate = new Date(today);\r",
											"    targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"    return targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                    (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                    targetDate.getFullYear();\r",
											"}\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    let jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);  \r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction     \r",
											"    let command = requestBody.request.command;    \r",
											"\r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"    \r",
											"    // Создание регулярного выражения с ожидаемой датой\r",
											"    let expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate + \" 00:00 тест событие 1! Выполнен выход в главное меню \");\r",
											"\r",
											"    // Проверка command\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"\r",
											"    // Проверка, что response является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"\r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"    pm.expect(jsonData.response.text).to.include(command);\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session');\r",
											"\r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"    pm.expect(jsonData.session).to.have.property('message_id');\r",
											"\r",
											"    // Проверяем, что значение ключей\r",
											"    pm.expect(jsonData.session.message_id).to.equal(3);\r",
											"\r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction  \r",
											"    let formattedDate = getNextDateByDay(valueAction);\r",
											"\r",
											"    // Дополнительные проверки значений\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"00:00\") {\r",
											"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
											"    }\r",
											"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"тест событие 1\") {\r",
											"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
											"    }\r",
											"\r",
											"    // Проверяем наличие и тип user_state_update\r",
											"    pm.expect(jsonData).to.have.property('user_state_update');\r",
											"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип object3 внутри user_state_update\r",
											"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
											"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип days внутри week\r",
											"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
											"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что formattedDate содержит 2 элемента\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(1);\r",
											"\r",
											"    // Проверяем первый элемент formattedDate\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"00:00\");\r",
											"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"тест событие 1\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"тест событие 1\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 3\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"воскресенье\",\n                        \"operation\": \"ADD_DAY\"\n                    },\n                    {\n                        \"number\": 2,\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"час минута\",\n                        \"operation\": \"ADD_TIME\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						}
					]
				},
				{
					"name": "2.3 Указание_дня",
					"item": [
						{
							"name": "2.3.1 ADD_DAY_today",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    // Проверка наличия объекта\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"    \r",
											"    // Проверка, что объект_тест является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"    \r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"\r",
											"    \r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.eql('Назовите время, например, 12 часов 30 минут ');\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"});\r",
											"\r",
											"//-------------------------------------------------------------------------------\r",
											"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session'); \r",
											"   \r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
											"\t\r",
											"    // Проверяем, что значение ключей\r",
											"\t pm.expect(jsonData.session.message_id).to.equal(1);\r",
											"    \r",
											"});\r",
											"\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка 'prevActions'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие session_state в ответе\r",
											"    pm.expect(jsonData).to.have.property('session_state');\r",
											"    pm.expect(jsonData.session_state).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие actions внутри session_state\r",
											"    pm.expect(jsonData.session_state).to.have.property('actions');\r",
											"    pm.expect(jsonData.session_state.actions).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие prevActions внутри actions\r",
											"    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что prevActions не пустой\r",
											"    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);\r",
											"\r",
											"    // Проверяем ключи в первом элементе prevActions\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');\r",
											"\r",
											"    // Проверяем значения ключей\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal(\"ADD_EVENT\");\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal(\"добавь событие\");\r",
											"\r",
											"    // Проверяем ключи во втором элементе prevActions\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');\r",
											"\r",
											"    // Проверяем значения ключей\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal(\"ADD_DAY\");\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal(\"ADD_EVENT\");\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal(\"сегодня\");\r",
											"\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"сегодня\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 1\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.3.2 ADD_DAY_tomorrow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"1. Проверка text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    // Проверка наличия объекта\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"    \r",
											"    // Проверка, что объект_тест является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"    \r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"    \r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.eql('Назовите время, например, 12 часов 30 минут ');\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"});\r",
											"\r",
											"//-------------------------------------------------------------------------------\r",
											"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session'); \r",
											"   \r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
											"\t\r",
											"    // Проверяем, что значение ключей\r",
											"\t pm.expect(jsonData.session.message_id).to.equal(1);\r",
											"    \r",
											"});\r",
											"\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка 'prevActions'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие session_state в ответе\r",
											"    pm.expect(jsonData).to.have.property('session_state');\r",
											"    pm.expect(jsonData.session_state).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие actions внутри session_state\r",
											"    pm.expect(jsonData.session_state).to.have.property('actions');\r",
											"    pm.expect(jsonData.session_state.actions).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие prevActions внутри actions\r",
											"    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что prevActions не пустой\r",
											"    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);\r",
											"\r",
											"    // Проверяем ключи в первом элементе prevActions\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');\r",
											"\r",
											"    // Проверяем значения ключей\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal(\"ADD_EVENT\");\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal(\"добавь событие\");\r",
											"\r",
											"    // Проверяем ключи во втором элементе prevActions\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');\r",
											"\r",
											"    // Проверяем значения ключей\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal(\"ADD_DAY\");\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal(\"ADD_EVENT\");\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal(\"завтра\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"завтра\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 1\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"завтра\"\n    },\n    \"session\": {\n        \"user_id\": \"06325314\",\n        \"session_id\": \"4ef31ea8-6ec0-4a20-ae83-d43d8560aea0\",\n        \"message_id\": 1\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.3.3 ADD_DAY_mon",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"1. Проверка text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    // Проверка наличия объекта\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"    \r",
											"    // Проверка, что объект_тест является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"    \r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"    \r",
											"    \r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.eql('Назовите время, например, 12 часов 30 минут ');\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"});\r",
											"\r",
											"//-------------------------------------------------------------------------------\r",
											"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session'); \r",
											"   \r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
											"\t\r",
											"    // Проверяем, что значение ключей\r",
											"\t pm.expect(jsonData.session.message_id).to.equal(1);\r",
											"    \r",
											"});\r",
											"\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка 'prevActions'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие session_state в ответе\r",
											"    pm.expect(jsonData).to.have.property('session_state');\r",
											"    pm.expect(jsonData.session_state).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие actions внутри session_state\r",
											"    pm.expect(jsonData.session_state).to.have.property('actions');\r",
											"    pm.expect(jsonData.session_state.actions).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие prevActions внутри actions\r",
											"    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что prevActions не пустой\r",
											"    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);\r",
											"\r",
											"    // Проверяем ключи в первом элементе prevActions\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');\r",
											"\r",
											"    // Проверяем значения ключей\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal(\"ADD_EVENT\");\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal(\"добавь событие\");\r",
											"\r",
											"    // Проверяем ключи во втором элементе prevActions\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');\r",
											"\r",
											"    // Проверяем значения ключей\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal(\"ADD_DAY\");\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal(\"ADD_EVENT\");\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal(\"понедельник\");\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"понедельник\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 1\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						}
					]
				},
				{
					"name": "2.4 Доп_запросы",
					"item": [
						{
							"name": "2.4.1 ADD_TIME_0h:0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"1. Проверка text \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    // Проверка наличия объекта\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"    \r",
											"    // Проверка, что объект_тест является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"    \r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"    \r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.eql('Назовите название события ');\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"});\r",
											"\r",
											"//-------------------------------------------------------------------------------\r",
											"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session'); \r",
											"   \r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
											"\t\r",
											"    // Проверяем, что значение ключей\r",
											"\t pm.expect(jsonData.session.message_id).to.equal(2);\r",
											"    \r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка 'prevActions'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие session_state в ответе\r",
											"    pm.expect(jsonData).to.have.property('session_state');\r",
											"    pm.expect(jsonData.session_state).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие actions внутри session_state\r",
											"    pm.expect(jsonData.session_state).to.have.property('actions');\r",
											"    pm.expect(jsonData.session_state.actions).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие prevActions внутри actions\r",
											"    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что prevActions не пустой\r",
											"    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);\r",
											"\r",
											"    // Проверяем ключи в первом элементе prevActions\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');\r",
											"\r",
											"    // Проверяем значения ключей\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal(\"ADD_EVENT\");\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal(\"добавь событие\");\r",
											"\r",
											"    // Проверяем ключи во втором элементе prevActions\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('number');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('operation');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('prevOperation');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1]).to.have.property('valueAction');\r",
											"\r",
											"    // Проверяем значения ключей\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1].number).to.equal(1);\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1].operation).to.equal(\"ADD_DAY\");\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1].prevOperation).to.equal(\"ADD_EVENT\");\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[1].valueAction).to.equal(\"понедельник\");\r",
											"\r",
											"        // Проверяем ключи во третьем элементе prevActions\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[2]).to.have.property('number');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[2]).to.have.property('operation');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[2]).to.have.property('prevOperation');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[2]).to.have.property('valueAction');\r",
											"\r",
											"    // Проверяем значения ключей\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[2].number).to.equal(2);\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[2].operation).to.equal(\"ADD_TIME\");\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[2].prevOperation).to.equal(\"ADD_DAY\");\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[2].valueAction).to.equal(\"ноль часов ноль\");\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"ноль часов ноль\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 2\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                        \"number\": 0,\n                        \"valueAction\": \"добавь событие\",\n                        \"operation\": \"ADD_EVENT\"\n                    },\n                    {\n                        \"number\": 1,\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"понедельник\",\n                        \"operation\": \"ADD_DAY\"\n                    }\n                ]\n            }\n        },\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.4.2 Добавление_события_random",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"1. Проверка text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Получаем день недели из запроса\r",
											"    let requestBody = JSON.parse(pm.request.body.raw);\r",
											"    let actions =  requestBody.state.session.actions;\r",
											"\r",
											"    var valueAction = requestBody.state.session.actions.prevActions.find(item => item.number === 1).valueAction; // Предполагаем, что день недели указан в ключе valueAction\r",
											"\r",
											"    // Функция для получения следующей даты определенного дня недели\r",
											"    function getNextvalueAction(dayName) {\r",
											"        const days = ['воскресенье', 'понедельник', 'вторник', 'среда', 'четверг', 'пятница', 'суббота'];\r",
											"        const today = new Date();\r",
											"        const dayIndex = days.indexOf(dayName);\r",
											"        if (dayIndex === -1) return null;\r",
											"        \r",
											"        const targetDate = new Date(today);\r",
											"        targetDate.setDate(today.getDate() + (dayIndex + 7 - today.getDay()) % 7);\r",
											"        return targetDate;\r",
											"    }\r",
											"    \r",
											"    // Получаем ближайшую дату для указанного дня недели\r",
											"    var targetDate = getNextvalueAction(valueAction);\r",
											"    \r",
											"    // Проверка на null перед форматированием даты\r",
											"    if (targetDate !== null) {\r",
											"        // Форматируем дату в DD-MM-YYYY\r",
											"        var formattedDate = targetDate.getDate().toString().padStart(2, '0') + '-' +\r",
											"                            (targetDate.getMonth() + 1).toString().padStart(2, '0') + '-' +\r",
											"                            targetDate.getFullYear();\r",
											"        console.log(\"Ожидаемая дата:\", formattedDate);  \r",
											"\r",
											"        // Создание регулярного выражения с ожидаемой датой\r",
											"        var expectedPattern = new RegExp('^Событие успешно добавлено на ' + formattedDate);\r",
											"\r",
											"        // Проверка наличия объекта\r",
											"        pm.expect(jsonData).to.have.property('response');\r",
											"        \r",
											"        // Проверка, что response является объектом\r",
											"        pm.expect(jsonData.response).to.be.an('object');\r",
											"        \r",
											"        // Проверка наличия ключа внутри объекта\r",
											"        pm.expect(jsonData.response).to.have.property('text');\r",
											"        pm.expect(jsonData.response).to.have.property('end_session');\r",
											"        \r",
											"        // Проверка значения ключа внутри объекта\r",
											"        pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
											"        pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"    } else {\r",
											"        console.log(\"Не удалось определить ближайшую дату для указанного дня недели\");\r",
											"    }\r",
											"});\r",
											"\r",
											"  //-------------------------------------------------------------------------------\r",
											"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session'); \r",
											"   \r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
											"\t\r",
											"    // Проверяем, что значение ключей\r",
											"\t pm.expect(jsonData.session.message_id).to.equal(4);\r",
											"    \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"добавь событие\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 4\n    },\n    \"state\": {\n        \"session\": {\n            \"actions\": {\n                \"prevActions\": [\n                    {\n                    \"number\": 0,\n                    \"operation\": \"ADD_EVENT\",\n                    \"valueAction\": \"добавь событие\"\n                    }\n                    ,\n                    {\n                        \"number\": 1,\n                        \"operation\": \"ADD_DAY\",\n                        \"prevOperation\": \"ADD_EVENT\",\n                        \"valueAction\": \"добавь событие\"\n                    }\n                    ,\n                    {\n                        \"number\": 2,\n                        \"operation\": \"ADD_TIME\",\n                        \"prevOperation\": \"ADD_DAY\",\n                        \"valueAction\": \"добавь событие\"\n                    }\n                    \n                ]\n            }\n        },\n        \"user\": {\n            \"week\": {\n                \"days\": {}\n            }\n        }\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.4.3 Добавь_событие_state{}",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"pm.test(\"1. Проверка text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    // Проверка наличия объекта\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"    \r",
											"    // Проверка, что объект_тест является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"    \r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"    \r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.eql('Назовите день, например, среда ');\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);    \r",
											"});\r",
											"\r",
											"//-------------------------------------------------------------------------------\r",
											"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session'); \r",
											"   \r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
											"\t\r",
											"    // Проверяем, что значение ключей\r",
											"\tpm.expect(jsonData.session.message_id).to.equal(0);\r",
											"    \r",
											"});\r",
											"\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Проверка структуры ответа и значения 'prevActions.number'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    // Проверяем наличие session_state в ответе\r",
											"    pm.expect(jsonData).to.have.property('session_state');\r",
											"    pm.expect(jsonData.session_state).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие actions внутри session_state\r",
											"    pm.expect(jsonData.session_state).to.have.property('actions');\r",
											"    pm.expect(jsonData.session_state.actions).to.be.an('object');\r",
											"\r",
											"    // Проверяем наличие prevActions внутри actions\r",
											"    pm.expect(jsonData.session_state.actions).to.have.property('prevActions');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions).to.be.an('array');\r",
											"\r",
											"    // Проверяем, что prevActions не пустой\r",
											"    pm.expect(jsonData.session_state.actions.prevActions).to.have.length.above(0);\r",
											"\r",
											"    // Проверяем ключи в первом элементе prevActions\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('number');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('operation');\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0]).to.have.property('valueAction');\r",
											"\r",
											"    // Проверяем значения ключей\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0].number).to.equal(0);\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0].operation).to.equal(\"ADD_EVENT\");\r",
											"    pm.expect(jsonData.session_state.actions.prevActions[0].valueAction).to.equal(\"добавь событие\");\r",
											"\r",
											"});\r",
											"\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"4. Проверка отсутствия user_state_update\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.not.have.property('user_state_update');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"добавь событие\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 0\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						},
						{
							"name": "2.4. Неизвестная_команда_param_max",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"1. Проверка text\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    // Проверка наличия объекта\r",
											"    pm.expect(jsonData).to.have.property('response');\r",
											"    \r",
											"    // Проверка, что объект_тест является объектом\r",
											"    pm.expect(jsonData.response).to.be.an('object');\r",
											"    \r",
											"    // Проверка наличия ключа внутри объекта\r",
											"    pm.expect(jsonData.response).to.have.property('text');\r",
											"    pm.expect(jsonData.response).to.have.property('end_session');\r",
											"    \r",
											"    // Проверка значения ключа внутри объекта\r",
											"    pm.expect(jsonData.response.text).to.eql('Получена неизвестная команда! Используйте команду справка для того чтобы узнать мои команды');\r",
											"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
											"    });\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    // Проверяем наличие объекта 'session' в ответе\r",
											"    pm.expect(jsonData).to.have.property('session'); \r",
											"   \r",
											"    // Проверяем наличие ключей внутри 'session'\r",
											"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
											"\t\r",
											"    // Проверяем, что значение ключей\r",
											"\t pm.expect(jsonData.session.message_id).to.equal(2147483647);\r",
											"    \r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"pm.test(\"3. Значение version\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    \r",
											"    // Проверяем наличие объекта 'version' в ответе\r",
											"    pm.expect(jsonData).to.have.property('version');\r",
											"\t\r",
											"    // Проверяем, что значение ключей\r",
											"\tpm.expect(jsonData.version).to.equal('1.01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111');\r",
											"    \r",
											"});\r",
											"//-------------------------------------------------------------------------------\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"request\": {\n        \"original_utterance111\": \"original_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utterance\",\n        \"nlu111\": {\n            \"entities111\": [111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111],\n            \"tokens111\": [\n                \"справкасправкасправкасправкасправкасправкасправкасправкасправкасправкасправкасправкасправкасправкасправкасправкасправкасправкасправкасправкасправкасправкасправкасправкасправкасправкаoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utterance\"\n            ]\n        },\n        \"type111\": \"ButtonPressedButtonPressedButtonPressedButtonPressedButtonPressedButtonPressedButtonPressedButtonPressedButtonPressedButtonPressedButtonPressedButtonPressedButtonPressedoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utterance\",\n        \"command\": \"спрdgdfgdfgdfgdfgdfgавка1111sssssfffffffffffsdsdasdasdsdsdsdsadsadddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utterance\"\n    },\n    \"meta1111\": {\n        \"interfaces111\": {\n            \"screen111\": {\"KEY\":1}\n        },\n        \"timezone111\": \"timezonetimezonetimezonetimezonetimezonetimezonetimezonetimezoneoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utterance\",\n        \"_city_ru111\": \"original_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceКраснодар1111111111111111111111111111111111111111111111111111111111111111111111111\",\n        \"locale111\": \"original_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utterance1234511111111111111111111111111111111111111111111111111111111\",\n        \"client_id111\": \"1111MailRu-VC\\/1.01111MailRu-VC\\/1.01111MailRu-VC\\/1.01111MailRu-VC\\/1.01111MailRu-VC\\/1.01111MailRu-VC\\/1.01111MailRu-VC\\/1.01111MailRu-VC\\/1.01111MailRu-VC\\/1.01111MailRu-VC\\/1.01111MailRu-VC\\/1.01111MailRu-VC\\/1.01111MailRu-VC\\/1.0original_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utterance\"\n    },\n    \"session\": {\n        \"new\": true,\n        \"application111\": {\n            \"application_type111\": \"original_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceweb1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\",\n            \"application_id111\": \"original_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utterance87837111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n        },\n        \"user_id\": \"{{user_id_max}}\",\n        \"session_id\": \"{{session_id_max}}\",\t\n        \"skill_id111\": \"original_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utterance52401ef111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\",\n        \"message_id\": 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111,\n        \"auth_token1111111\": \"6361111original_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utterance\",\n        \"user111\": {\n            \"user_id111\": \"original_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utteranceoriginal_utterance9fc847e311111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n        }\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {}\n    },\n    \"version\": \"1.01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{stand}}webhook"
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "3. План_на_сегодня",
			"item": [
				{
					"name": "3.1 PLAN_TODAY_2events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1. Проверка text\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Генерация текущей даты в формате DD-MM-YYYY\r",
									"    var currentDate = new Date();\r",
									"    var day = String(currentDate.getDate()).padStart(2, '0');\r",
									"    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!\r",
									"    var year = currentDate.getFullYear();\r",
									"    var formattedDate = day + '-' + month + '-' + year;\r",
									"    \r",
									"    // Создание регулярного выражения с текущей датой\r",
									"    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + ' 12:00 Прогулка на берегу моря, 14:00 Поздний обед');\r",
									"    \r",
									"    // Проверка наличия объекта\r",
									"    pm.expect(jsonData).to.have.property('response');\r",
									"    \r",
									"    // Проверка, что response является объектом\r",
									"    pm.expect(jsonData.response).to.be.an('object');\r",
									"    \r",
									"    // Проверка наличия ключа внутри объекта\r",
									"    pm.expect(jsonData.response).to.have.property('text');\r",
									"    \r",
									"    // Проверка значения ключа внутри объекта\r",
									"    pm.expect(jsonData.response.text).to.match(expectedPattern);   \r",
									"   \r",
									"});\r",
									"//-------------------------------------------------------------------------------\r",
									"pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие объекта 'session' в ответе\r",
									"    pm.expect(jsonData).to.have.property('session'); \r",
									"   \r",
									"    // Проверяем наличие ключей внутри 'session'\r",
									"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
									"\t\r",
									"    // Проверяем, что значение ключей\r",
									"\t pm.expect(jsonData.session.message_id).to.equal(1);\r",
									"    \r",
									"});\r",
									"//-------------------------------------------------------------------------------\r",
									"pm.test(\"3. Проверка структуры ответа и значений в user_state_update, currentDate\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"     // Дополнительные проверки значений\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('currentDate')][0].time !== \"12:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '01:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('currentDate')][0].time);\r",
									"    }\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('currentDate')][0].name !== \"Прогулка на берегу моря\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('currentDate')][0].name);\r",
									"    }\t\r",
									"\tif (jsonData.user_state_update.week.days[pm.variables.get('currentDate')][1].time !== \"14:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('currentDate')][1].time);\t\r",
									"\t}\t\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('currentDate')][1].name !== \"Поздний обед\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('currentDate')][1].name);\r",
									"    }\r",
									"\t\r",
									"    // Проверяем наличие и тип user_state_update\r",
									"    pm.expect(jsonData).to.have.property('user_state_update');\r",
									"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип object3 внутри user_state_update\r",
									"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
									"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип days внутри week\r",
									"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип {{currentDate}} внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('currentDate'));\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('currentDate')]).to.be.an('array');\r",
									"\r",
									"    // Проверяем, что 'currentDate' содержит 2 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('currentDate')]).to.have.lengthOf(2);\r",
									"\r",
									"    // Проверяем первый элемент 'currentDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('currentDate')][0]).to.have.property('time', \"12:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('currentDate')][0]).to.have.property('name', \"Прогулка на берегу моря\");\r",
									"\r",
									"    // Проверяем второй элемент 'currentDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('currentDate')][1]).to.have.property('time', \"14:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('currentDate')][1]).to.have.property('name', \"Поздний обед\");\r",
									"});\r",
									"\r",
									"//-------------------------------------------------------------------------------\r",
									"pm.test(\"4. Проверка структуры ответа и значений в user_state_update, pastDate\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"     // Дополнительные проверки значений\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time !== \"13:30\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '13:30' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time);\r",
									"    }\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name !== \"Приготовить асаду\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Приготовить асаду' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name);\r",
									"    }\r",
									"\t\r",
									"\t if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time !== \"09:10\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '09:10' для time во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time);\t\r",
									"\t}\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name !== \"Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции' для name во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name);\r",
									"    }\r",
									"\t\r",
									"\r",
									"    // Проверяем наличие и тип user_state_update\r",
									"    pm.expect(jsonData).to.have.property('user_state_update');\r",
									"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип object3 внутри user_state_update\r",
									"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
									"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип days внутри week\r",
									"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип {{pastDate}} внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('pastDate'));\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.be.an('array');\r",
									"\r",
									"    // Проверяем, что 'pastDate' содержит 2 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.have.lengthOf(2);\r",
									"\r",
									"    // Проверяем первый элемент 'pastDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('time', \"13:30\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('name', \"Приготовить асаду\");\r",
									"\r",
									"    // Проверяем второй элемент 'pastDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('time', \"09:10\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('name', \"Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции\");\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Функция для форматирования даты\r",
									"function formatDate(date) {\r",
									"    var day = String(date.getDate()).padStart(2, '0');\r",
									"    var month = String(date.getMonth() + 1).padStart(2, '0');\r",
									"    var year = date.getFullYear();\r",
									"    return day + '-' + month + '-' + year;\r",
									"}\r",
									"\r",
									"// Текущая дата\r",
									"var current = new Date();\r",
									"current.setDate(current.getDate());\r",
									"pm.variables.set(\"currentDate\", formatDate(current));\r",
									"\r",
									"// Дата в прошлом (например, 7 дней назад)\r",
									"var pastDate = new Date();\r",
									"pastDate.setDate(pastDate.getDate() - 90);\r",
									"pm.variables.set(\"pastDate\", formatDate(pastDate));\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"original_utterance\": \"сегодня\",\n        \"nlu\": {\n            \"entities\": [],\n            \"tokens\": [\n                \"сегодня\"\n            ]\n        },\n        \"type\": \"SimpleUtterance\",\n        \"command\": \"план сегодня\"\n    },\n    \"meta\": {\n        \"interfaces\": {\n            \"screen\": {}\n        },\n        \"timezone\": \"Europe\\/Moscow\",\n        \"_city_ru\": \"Краснодар\",\n        \"locale\": \"ru_RU\",\n        \"client_id\": \"MailRu-VC\\/1.0\"\n    },\n    \"session\": {\n        \"new\": false,\n        \"application\": {\n            \"application_type\": \"web\",\n            \"application_id\": \"87837\"\n        },\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\t\n        \"skill_id\": \"52401ef1\",\n        \"message_id\": 1,\n        \"auth_token\": \"636\",\n        \"user\": {\n            \"user_id\": \"9fc847e3\"\n        }\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {\n            \"week\": {\n                \"days\": {\n                    \"{{currentDate}}\": [\n                        {\n                            \"time\": \"12:00\",\n                            \"name\": \"Прогулка на берегу моря\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        }\n                    ],\n                    \"{{pastDate}}\": [\n                        {\n                            \"time\": \"13:30\",\n                            \"name\": \"Приготовить асаду\"\n                        },\n                        {\n                            \"time\": \"09:10\",\n                            \"name\": \"Прогуляться по утреннему Буэнос- Айресу и выругаться по поводу эмиграции\"\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"version\": \"1.0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{stand}}webhook"
					},
					"response": []
				},
				{
					"name": "3.3  PLAN_TODAY_past",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Функция для форматирования даты\r",
									"function formatDate(date) {\r",
									"    var day = String(date.getDate()).padStart(2, '0');\r",
									"    var month = String(date.getMonth() + 1).padStart(2, '0');\r",
									"    var year = date.getFullYear();\r",
									"    return day + '-' + month + '-' + year;\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"// Дата в прошлом (например, 7 дней назад)\r",
									"var pastDate = new Date();\r",
									"pastDate.setDate(pastDate.getDate() - 90);\r",
									"pm.variables.set(\"pastDate\", formatDate(pastDate));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"1. Проверка text\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверка наличия объекта\r",
									"    pm.expect(jsonData).to.have.property('response');\r",
									"    \r",
									"    // Проверка, что объект_тест является объектом\r",
									"    pm.expect(jsonData.response).to.be.an('object');\r",
									"    \r",
									"    // Проверка наличия ключа внутри объекта\r",
									"    pm.expect(jsonData.response).to.have.property('text');\r",
									"    pm.expect(jsonData.response).to.have.property('end_session');\r",
									"    \r",
									"    // Проверка значения ключа внутри объекта\r",
									"    pm.expect(jsonData.response.text).to.eql('У вас пока нет событий на сегодня');\r",
									"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
									"});\r",
									"//-------------------------------------------------------------------------------\r",
									"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие объекта 'session' в ответе\r",
									"    pm.expect(jsonData).to.have.property('session'); \r",
									"   \r",
									"    // Проверяем наличие ключей внутри 'session'\r",
									"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
									"\t\r",
									"    // Проверяем, что значение ключей\r",
									"\t pm.expect(jsonData.session.message_id).to.equal(4);\r",
									"    \r",
									"});\r",
									"\r",
									"//-------------------------------------------------------------------------------\r",
									"pm.test(\"3. Проверка user_state_update -> pastDate\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"     // Дополнительные проверки значений\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time !== \"00:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time);\r",
									"    }\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name !== \"тест событие 1\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name);\r",
									"    }\t \r",
									"\t\r",
									"    // Проверяем наличие и тип user_state_update\r",
									"    pm.expect(jsonData).to.have.property('user_state_update');\r",
									"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип object3 внутри user_state_update\r",
									"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
									"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип days внутри week\r",
									"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип 'pastDate' внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('pastDate'));\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.be.an('array');\r",
									"\t\r",
									"\r",
									"    // Проверяем, что 'pastDate' содержит 1 элемент\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.have.lengthOf(1);\t\r",
									"\t\r",
									"    // Проверяем первый элемент 'pastDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('time', \"00:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('name', \"тест событие 1\");\r",
									"\r",
									"    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"план на сегодня\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 4\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {\n            \"week\": {\n                \"days\": {\n                    \"{{pastDate}}\": [\n                        {\n                            \"time\": \"00:00\",\n                            \"name\": \"тест событие 1\"\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"version\": \"1.0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{stand}}webhook"
					},
					"response": []
				},
				{
					"name": "3.4  PLAN_TODAY_future",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Функция для форматирования даты\r",
									"function formatDate(date) {\r",
									"    var day = String(date.getDate()).padStart(2, '0');\r",
									"    var month = String(date.getMonth() + 1).padStart(2, '0');\r",
									"    var year = date.getFullYear();\r",
									"    return day + '-' + month + '-' + year;\r",
									"}\r",
									"\r",
									"// Завтрашняя дата\r",
									"var tomorrow = new Date();\r",
									"tomorrow.setDate(tomorrow.getDate() + 90);\r",
									"pm.variables.set(\"futureDate\", formatDate(tomorrow));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"1. Проверка text\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверка наличия объекта\r",
									"    pm.expect(jsonData).to.have.property('response');\r",
									"    \r",
									"    // Проверка, что объект_тест является объектом\r",
									"    pm.expect(jsonData.response).to.be.an('object');\r",
									"    \r",
									"    // Проверка наличия ключа внутри объекта\r",
									"    pm.expect(jsonData.response).to.have.property('text');\r",
									"    pm.expect(jsonData.response).to.have.property('end_session');\r",
									"    \r",
									"    // Проверка значения ключа внутри объекта\r",
									"    pm.expect(jsonData.response.text).to.eql('У вас пока нет событий на сегодня');\r",
									"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
									"});\r",
									"//-------------------------------------------------------------------------------\r",
									"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие объекта 'session' в ответе\r",
									"    pm.expect(jsonData).to.have.property('session'); \r",
									"   \r",
									"    // Проверяем наличие ключей внутри 'session'\r",
									"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
									"\t\r",
									"    // Проверяем, что значение ключей\r",
									"\t pm.expect(jsonData.session.message_id).to.equal(4);\r",
									"    \r",
									"});\r",
									"\r",
									"//-------------------------------------------------------------------------------\r",
									"pm.test(\"3. Проверка user_state_update -> futureDate\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"     // Дополнительные проверки значений\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time !== \"00:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '00:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time);\r",
									"    }\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name !== \"тест событие 1\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'тест событие 1' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name);\r",
									"    }\t \r",
									"\t\r",
									"    // Проверяем наличие и тип user_state_update\r",
									"    pm.expect(jsonData).to.have.property('user_state_update');\r",
									"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип object3 внутри user_state_update\r",
									"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
									"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип days внутри week\r",
									"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип 'pastDate' внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('futureDate'));\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.be.an('array');\r",
									"\t\r",
									"\r",
									"    // Проверяем, что 'pastDate' содержит 1 элемент\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.have.lengthOf(1);\t\r",
									"\t\r",
									"    // Проверяем первый элемент 'pastDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('time', \"00:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('name', \"тест событие 1\");\r",
									"\r",
									"    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"план на сегодня\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 4\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {\n            \"week\": {\n                \"days\": {\n                    \"{{futureDate}}\": [\n                        {\n                            \"time\": \"00:00\",\n                            \"name\": \"тест событие 1\"\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"version\": \"1.0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{stand}}webhook"
					},
					"response": []
				},
				{
					"name": "3.5  PLAN_TODAY_list_time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Генерация текущей даты в формате DD-MM-YYYY\r",
									"\r",
									"function generateCurrentDate() {\r",
									"    var currentDate = new Date();\r",
									"    var day = String(currentDate.getDate()).padStart(2, '0');\r",
									"    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!\r",
									"    var year = currentDate.getFullYear();\r",
									"    return day + '-' + month + '-' + year;\r",
									"}\r",
									"//-------------------------------------------------------------------------------\r",
									"pm.test(\"1. Проверка text с currentDate\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var formattedDate = generateCurrentDate()\r",
									"\r",
									"    // Создание регулярного выражения с текущей датой\r",
									"    var expectedPattern = new RegExp('^Ваши события на сегодня ' + formattedDate + \" 00:00 Поздний обед00, 01:00 Поздний обед01, 02:00 Поздний обед02, 03:00 Поздний обед03, 04:00 Поздний обед04, 10:00 Поздний обед10, 11:00 Поздний обед11, 12:00 Прогулка на берегу моря12, 14:00 Поздний обед14, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 17:00 Поздний обед17\");\r",
									"\r",
									"    // Проверка наличия объекта\r",
									"    pm.expect(jsonData).to.have.property('response');\r",
									"\r",
									"    // Проверка, что response является объектом\r",
									"    pm.expect(jsonData.response).to.be.an('object');\r",
									"\r",
									"    // Проверка наличия ключа внутри объекта\r",
									"    pm.expect(jsonData.response).to.have.property('text');\r",
									"    pm.expect(jsonData.response).to.have.property('end_session');\r",
									"\r",
									"    // Проверка значения ключа внутри объекта\r",
									"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
									"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
									"\r",
									"});\r",
									"//-------------------------------------------------------------------------------\r",
									"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие объекта 'session' в ответе\r",
									"    pm.expect(jsonData).to.have.property('session'); \r",
									"   \r",
									"    // Проверяем наличие ключей внутри 'session'\r",
									"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
									"\t\r",
									"    // Проверяем, что значение ключей\r",
									"\t pm.expect(jsonData.session.message_id).to.equal(4);\r",
									"    \r",
									"});\r",
									"\r",
									"//-------------------------------------------------------------------------------\r",
									"\r",
									"\r",
									"pm.test(\"3. Проверка user_state_update -> currentDate \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var formattedDate = generateCurrentDate()\r",
									"\r",
									"     // Дополнительные проверки значений\r",
									"    if (jsonData.user_state_update.week.days[formattedDate][0].time !== \"12:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '12:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].time);\r",
									"    }\r",
									"    if (jsonData.user_state_update.week.days[formattedDate][0].name !== \"Прогулка на берегу моря12\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Прогулка на берегу моря12' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][0].name);\r",
									"    }\r",
									"\t\r",
									"\t if (jsonData.user_state_update.week.days[formattedDate][98].time !== \"14:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][98].time);\t\r",
									"\t}\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[formattedDate][98].name !== \"Поздний обед\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Поздний обед' для name в 99м элементе, но получено\", jsonData.user_state_update.week.days[formattedDate][98].name);\r",
									"    }\r",
									"\t\r",
									"\r",
									"    // Проверяем наличие и тип user_state_update\r",
									"    pm.expect(jsonData).to.have.property('user_state_update');\r",
									"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип object3 внутри user_state_update\r",
									"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
									"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип days внутри week\r",
									"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип formattedDate внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(formattedDate);\r",
									"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.be.an('array');\r",
									"\r",
									"    // Проверяем, что \"formattedDate\" содержит 99 элементов\r",
									"    pm.expect(jsonData.user_state_update.week.days[formattedDate]).to.have.lengthOf(99);\r",
									"\r",
									"    // Проверяем первый элемент formattedDate\r",
									"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('time', \"12:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[formattedDate][0]).to.have.property('name', \"Прогулка на берегу моря12\");\r",
									"\r",
									"    // Проверяем второй элемент formattedDate\r",
									"    pm.expect(jsonData.user_state_update.week.days[formattedDate][98]).to.have.property('time', \"14:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[formattedDate][98]).to.have.property('name', \"Поздний обед\");\r",
									"\r",
									"});\r",
									"//-------------------------------------------------------------------------------\r",
									"pm.test(\"4. Проверка user_state_update -> pastDate и futureDate\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"     // Дополнительные проверки значений\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time !== \"17:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '17:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time);\r",
									"    }\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name !== \"Ужин\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Ужин' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name);\r",
									"    }\t\r",
									"\tif (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][149].time !== \"20:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '20:00' для time в 150м элементе элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][149].time);\t\r",
									"\t}\t\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][149].name !== \"Велосипедная прогулка\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Велосипедная прогулка' для name в 152м элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][149].name);\r",
									"    }\t\r",
									"\r",
									"\tif (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time !== \"17:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '17:00' для time в 150м элементе элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time);\t\r",
									"\t}\t\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name !== \"Ужин\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Ужин' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name);\r",
									"    }\r",
									"\t\r",
									"\t if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time !== \"20:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '20:00' для time во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time);\t\r",
									"\t}\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name !== \"Велосипедная прогулка\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Велосипедная прогулка' для name во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name);\r",
									"    }\r",
									"\r",
									"    if (jsonData.user_state_update.week.days[\"28-09-2023\"][0].time !== \"17:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '17:00' для time в 150м элементе элементе, но получено\", jsonData.user_state_update.week.days[\"28-09-2023\"][0].time);\t\r",
									"\t}\t\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[\"28-09-2023\"][0].name !== \"Ужин\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Ужин' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[\"28-09-2023\"][0].name);\r",
									"    }\r",
									"\t\r",
									"\t if (jsonData.user_state_update.week.days[\"28-09-2023\"][1].time !== \"20:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '20:00' для time во втором элементе, но получено\", jsonData.user_state_update.week.days[\"28-09-2023\"][1].time);\t\r",
									"\t}\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[\"28-09-2023\"][1].name !== \"Велосипедная прогулка\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Велосипедная прогулка' для name во втором элементе, но получено\", jsonData.user_state_update.week.days[\"28-09-2023\"][1].name);\r",
									"    }\r",
									"\t\r",
									"    // Проверяем наличие и тип user_state_update\r",
									"    pm.expect(jsonData).to.have.property('user_state_update');\r",
									"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип object3 внутри user_state_update\r",
									"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
									"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип days внутри week\r",
									"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип {{pastDate}} внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('pastDate'));\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.be.an('array');\r",
									"\t\r",
									"\t// Проверяем наличие и тип {{futureDate}} внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('futureDate'));\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.be.an('array');\r",
									"\r",
									"    // Проверяем наличие и тип \"28-09-2023\" внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(\"28-09-2023\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"]).to.be.an('array');\r",
									"\r",
									"    // Проверяем, что 'pastDate' содержит 152 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.have.lengthOf(150);\r",
									"\t\r",
									"\t// Проверяем, что 'futureDate' содержит 2 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.have.lengthOf(2);\r",
									"\r",
									"    // Проверяем, что \"28-09-2023\" содержит 2 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"]).to.have.lengthOf(2);\r",
									"\r",
									"    // Проверяем первый элемент 'pastDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('time', \"17:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('name', \"Ужин\");\r",
									"\r",
									"    // Проверяем 150й элемент 'pastDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][149]).to.have.property('time', \"20:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][149]).to.have.property('name', \"Велосипедная прогулка\");\r",
									"\t\r",
									"\t// Проверяем первый элемент 'futureDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('time', \"17:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('name', \"Ужин\");\r",
									"\r",
									"    // Проверяем второй элемент 'futureDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('time', \"20:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('name', \"Велосипедная прогулка\");\r",
									"\r",
									"\t// Проверяем первый элемент \"28-09-2023\"\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"][0]).to.have.property('time', \"17:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"][0]).to.have.property('name', \"Ужин\");\r",
									"\r",
									"    // Проверяем второй элемент \"28-09-2023\"'\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"][1]).to.have.property('time', \"20:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"][1]).to.have.property('name', \"Велосипедная прогулка\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Функция для форматирования даты\r",
									"function formatDate(date) {\r",
									"    var day = String(date.getDate()).padStart(2, '0');\r",
									"    var month = String(date.getMonth() + 1).padStart(2, '0');\r",
									"    var year = date.getFullYear();\r",
									"    return day + '-' + month + '-' + year;\r",
									"}\r",
									"\r",
									"// Завтрашняя дата\r",
									"var tomorrow = new Date();\r",
									"tomorrow.setDate(tomorrow.getDate() + 90);\r",
									"pm.variables.set(\"futureDate\", formatDate(tomorrow));\r",
									"\r",
									"// Дата в прошлом (например, 7 дней назад)\r",
									"var pastDate = new Date();\r",
									"pastDate.setDate(pastDate.getDate() - 90);\r",
									"pm.variables.set(\"pastDate\", formatDate(pastDate));\r",
									"\r",
									"// Текущая\r",
									"var curDate = new Date();\r",
									"curDate.setDate(curDate.getDate());\r",
									"pm.variables.set(\"curDate\", formatDate(curDate));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"план на сегодня\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 4\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {\n            \"week\": {\n                \"days\": {\n                   \"{{curDate}}\": [\n                        {\n                            \"time\": \"12:00\",\n                            \"name\": \"Прогулка на берегу моря12\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед14\"\n                        },\n                        {\n                            \"time\": \"11:00\",\n                            \"name\": \"Поздний обед11\"\n                        },\n                        {\n                            \"time\": \"10:00\",\n                            \"name\": \"Поздний обед10\"\n                        },\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Поздний обед17\"\n                        },\n                        {\n                            \"time\": \"00:00\",\n                            \"name\": \"Поздний обед00\"\n                        },\n                        {\n                            \"time\": \"01:00\",\n                            \"name\": \"Поздний обед01\"\n                        },\n                        {\n                            \"time\": \"02:00\",\n                            \"name\": \"Поздний обед02\"\n                        },\n                        {\n                            \"time\": \"03:00\",\n                            \"name\": \"Поздний обед03\"\n                        },\n                        {\n                            \"time\": \"04:00\",\n                            \"name\": \"Поздний обед04\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        }\n                    ],\n                    \"{{pastDate}}\": [\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Ужин\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        }\n                    ],\n                    \"{{futureDate}}\": [\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Ужин\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        }\n                    ],\n                    \"28-09-2023\": [\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Ужин\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"version\": \"1.0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{stand}}webhook"
					},
					"response": []
				},
				{
					"name": "3.6 TODAY_PLAN_empty",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Функция для форматирования даты\r",
									"function formatDate(date) {\r",
									"    var day = String(date.getDate()).padStart(2, '0');\r",
									"    var month = String(date.getMonth() + 1).padStart(2, '0');\r",
									"    var year = date.getFullYear();\r",
									"    return day + '-' + month + '-' + year;\r",
									"}\r",
									"\r",
									"// Завтрашняя дата\r",
									"var tomorrow = new Date();\r",
									"tomorrow.setDate(tomorrow.getDate() + 90);\r",
									"pm.variables.set(\"futureDate\", formatDate(tomorrow));\r",
									"\r",
									"// Дата в прошлом (например, 7 дней назад)\r",
									"var pastDate = new Date();\r",
									"pastDate.setDate(pastDate.getDate() - 90);\r",
									"pm.variables.set(\"pastDate\", formatDate(pastDate));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"1. Проверка наличия ключа и его значения внутри объекта\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверка наличия объекта\r",
									"    pm.expect(jsonData).to.have.property('response');\r",
									"    \r",
									"    // Проверка, что объект_тест является объектом\r",
									"    pm.expect(jsonData.response).to.be.an('object');\r",
									"    \r",
									"    // Проверка наличия ключа внутри объекта\r",
									"    pm.expect(jsonData.response).to.have.property('text');\r",
									"    pm.expect(jsonData.response).to.have.property('end_session');\r",
									"\r",
									"    \r",
									"    // Проверка значения ключа внутри объекта\r",
									"    pm.expect(jsonData.response.text).to.eql('У вас пока нет событий на сегодня');\r",
									"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
									"});\r",
									"\r",
									"//-------------------------------------------------------------------------------\r",
									"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие объекта 'session' в ответе\r",
									"    pm.expect(jsonData).to.have.property('session'); \r",
									"   \r",
									"    // Проверяем наличие ключей внутри 'session'\r",
									"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
									"\t\r",
									"    // Проверяем, что значение ключей\r",
									"\t pm.expect(jsonData.session.message_id).to.equal(1);\r",
									"    \r",
									"});\r",
									"//-------------------------------------------------------------------------------\r",
									"\r",
									"pm.test(\"3. Проверка'days' {}\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие user_state_update в ответе\r",
									"    pm.expect(jsonData).to.have.property('user_state_update');\r",
									"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие week внутри user_state_update\r",
									"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
									"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие days внутри week\r",
									"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
									"\r",
									"    // Проверяем, что days является пустым объектом\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object').that.is.empty;   \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"original_utterance\": \"сегодня\",\n        \"nlu\": {\n            \"entities\": [],\n            \"tokens\": [\n                \"сегодня\"\n            ]\n        },\n        \"type\": \"SimpleUtterance\",\n        \"command\": \"план сегодня\"\n    },\n    \"meta\": {\n        \"interfaces\": {\n            \"screen\": {}\n        },\n        \"timezone\": \"Europe\\/Moscow\",\n        \"_city_ru\": \"Краснодар\",\n        \"locale\": \"ru_RU\",\n        \"client_id\": \"MailRu-VC\\/1.0\"\n    },\n    \"session\": {\n        \"new\": false,\n        \"application\": {\n            \"application_type\": \"web\",\n            \"application_id\": \"87837\"\n        },\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"skill_id\": \"52401ef1\",\n        \"message_id\": 1,\n        \"auth_token\": \"636\",\n        \"user\": {\n            \"user_id\": \"9fc847e3\"\n        }\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {\n            \"week\": {\n                \"days\": {\n                }\n            }\n        }\n    },\n    \"version\": \"1.0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{stand}}webhook"
					},
					"response": []
				}
			]
		},
		{
			"name": "4. План_на_завтра",
			"item": [
				{
					"name": "4.1  PLAN_tom",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var date = new Date();\r",
									"date.setDate(date.getDate() + 1); // Добавляем 1 день к текущей дате\r",
									"\r",
									"var day = String(date.getDate()).padStart(2, '0');\r",
									"var month = String(date.getMonth() + 1).padStart(2, '0'); // Январь - это 0!\r",
									"var year = date.getFullYear();\r",
									"\r",
									"var formattedDate = day + '-' + month + '-' + year;\r",
									"\r",
									"pm.variables.set(\"tomorrowDate\", formattedDate);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1. Проверка text\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверка наличия объекта\r",
									"    pm.expect(jsonData).to.have.property('response');\r",
									"    \r",
									"    // Проверка, что объект_тест является объектом\r",
									"    pm.expect(jsonData.response).to.be.an('object');\r",
									"    \r",
									"    // Проверка наличия ключа внутри объекта\r",
									"    pm.expect(jsonData.response).to.have.property('text');\r",
									"    pm.expect(jsonData.response).to.have.property('end_session');\r",
									"    \r",
									"    // Проверка значения ключа внутри объекта\r",
									"    pm.expect(jsonData.response.text).to.eql('Ваши события на завтра ' + pm.variables.get('tomorrowDate') + ' 14:00 Поздний обед, 17:00 Прогулка на берегу моря');\r",
									"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
									"    });\r",
									"    //-------------------------------------------------------------------------------\r",
									"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие объекта 'session' в ответе\r",
									"    pm.expect(jsonData).to.have.property('session'); \r",
									"   \r",
									"    // Проверяем наличие ключей внутри 'session'\r",
									"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
									"\t\r",
									"    // Проверяем, что значение ключей\r",
									"\t pm.expect(jsonData.session.message_id).to.equal(4);\r",
									"    \r",
									"});\r",
									"//-------------------------------------------------------------------------------\r",
									"\r",
									"pm.test(\"3. Проверка user_state_update\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"     // Дополнительные проверки значений\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][0].time !== \"17:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '17:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][0].time);\r",
									"    }\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][0].name !== \"Прогулка на берегу моря\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][0].name);\r",
									"    }\t\r",
									"\tif (jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][1].time !== \"14:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '14:00' для time в 2м элементе элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][1].time);\t\r",
									"\t}\t\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][1].name !== \"Поздний обед\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Поздний обед' для name в 2м элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][1].name);\r",
									"    }\t\r",
									"\r",
									"//------------04-07-2024\r",
									"\r",
									"\tif (jsonData.user_state_update.week.days[\"04-07-2024\"][0].time !== \"17:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '17:00' для time в 1м элементе элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get(\"04-07-2024\")][0].time);\t\r",
									"\t}\t\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[\"04-07-2024\"][0].name !== \"Ужин\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Ужин' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get(\"04-07-2024\")][0].name);\r",
									"    }\r",
									"\t\r",
									"\t if (jsonData.user_state_update.week.days[\"04-07-2024\"][1].time !== \"20:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '20:00' для time во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get(\"04-07-2024\")][1].time);\t\r",
									"\t}\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[\"04-07-2024\"][1].name !== \"Велосипедная прогулка\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Велосипедная прогулка' для name во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get(\"04-07-2024\")][1].name);\r",
									"    }\r",
									"\r",
									"//------------05-10-2023\r",
									"\r",
									"    if (jsonData.user_state_update.week.days[\"05-10-2023\"][0].time !== \"17:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '17:00' для time в 1м элементе элементе, но получено\", jsonData.user_state_update.week.days[\"05-10-2023\"][0].time);\t\r",
									"\t}\t\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[\"05-10-2023\"][0].name !== \"Ужин\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Ужин' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[\"05-10-2023\"][0].name);\r",
									"    }\r",
									"\r",
									"    if (jsonData.user_state_update.week.days[\"05-10-2023\"][1].time !== \"20:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '20:00' для time в 2м элементе элементе, но получено\", jsonData.user_state_update.week.days[\"05-10-2023\"][1].time);\t\r",
									"\t}\t\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[\"05-10-2023\"][1].name !== \"Велосипедная прогулка\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Велосипедная прогулка' для name в 2м элементе, но получено\", jsonData.user_state_update.week.days[\"05-10-2023\"][1].name);\r",
									"    }\r",
									"\r",
									"//------------28-09-2023\r",
									"\r",
									"    if (jsonData.user_state_update.week.days[\"28-09-2023\"][0].time !== \"17:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '17:00' для time в 1м элементе элементе, но получено\", jsonData.user_state_update.week.days[\"28-09-2023\"][0].time);\t\r",
									"\t}\t\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[\"28-09-2023\"][0].name !== \"Ужин\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Ужин' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[\"28-09-2023\"][0].name);\r",
									"    }\r",
									"\r",
									"    if (jsonData.user_state_update.week.days[\"28-09-2023\"][1].time !== \"20:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '20:00' для time в 2м элементе элементе, но получено\", jsonData.user_state_update.week.days[\"28-09-2023\"][1].time);\t\r",
									"\t}\t\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[\"28-09-2023\"][1].name !== \"Велосипедная прогулка\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Велосипедная прогулка' для name в 2м элементе, но получено\", jsonData.user_state_update.week.days[\"28-09-2023\"][1].name);\r",
									"    }\t\r",
									"\r",
									" \r",
									"    // Проверяем наличие и тип user_state_update\r",
									"    pm.expect(jsonData).to.have.property('user_state_update');\r",
									"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип object3 внутри user_state_update\r",
									"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
									"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип days внутри week\r",
									"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип tomorrowDate внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('tomorrowDate'));\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')]).to.be.an('array');\r",
									"\t\r",
									"\t// Проверяем наличие и тип \"04-07-2024\" внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(\"04-07-2024\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"04-07-2024\"]).to.be.an('array');\r",
									"\r",
									"    // Проверяем наличие и тип \"05-10-2023\" внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(\"05-10-2023\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"05-10-2023\"]).to.be.an('array');\r",
									"\r",
									"    // Проверяем наличие и тип \"28-09-2023\" внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(\"28-09-2023\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"]).to.be.an('array');\r",
									"\r",
									"    // Проверяем, что 'tomorrowDate' содержит 2 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')]).to.have.lengthOf(2);\r",
									"\r",
									"    // Проверяем, что \"04-07-2024\" содержит 2 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"04-07-2024\"]).to.have.lengthOf(2);\r",
									"\r",
									"    // Проверяем, что \"05-10-2023\" содержит 2 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"05-10-2023\"]).to.have.lengthOf(2);\r",
									"\r",
									"    // Проверяем, что \"28-09-2023\" содержит 2 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"]).to.have.lengthOf(2);\r",
									"\r",
									"    // Проверяем первый элемент 'tomorrowDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][0]).to.have.property('time', \"17:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][0]).to.have.property('name', \"Прогулка на берегу моря\");\r",
									"\r",
									"    // Проверяем 150й элемент 'tomorrowDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][1]).to.have.property('time', \"14:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][1]).to.have.property('name', \"Поздний обед\");\r",
									"\t\r",
									"\t// Проверяем первый элемент \"04-07-2024\"\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"04-07-2024\"][0]).to.have.property('time', \"17:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"04-07-2024\"][0]).to.have.property('name', \"Ужин\");\r",
									"\r",
									"    // Проверяем второй элемент \"04-07-2024\"\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"04-07-2024\"][1]).to.have.property('time', \"20:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"04-07-2024\"][1]).to.have.property('name', \"Велосипедная прогулка\");\r",
									"\r",
									"\t// Проверяем первый элемент \"05-10-2023\"\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"05-10-2023\"][0]).to.have.property('time', \"17:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"05-10-2023\"][0]).to.have.property('name', \"Ужин\");\r",
									"\r",
									"    // Проверяем второй элемент \"05-10-2023\"\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"05-10-2023\"][1]).to.have.property('time', \"20:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"05-10-2023\"][1]).to.have.property('name', \"Велосипедная прогулка\");\r",
									"\r",
									"    \t// Проверяем первый элемент \"28-09-2023\"\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"][0]).to.have.property('time', \"17:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"][0]).to.have.property('name', \"Ужин\");\r",
									"\r",
									"    // Проверяем второй элемент \"28-09-2023\"\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"][1]).to.have.property('time', \"20:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"][1]).to.have.property('name', \"Велосипедная прогулка\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"план на завтра\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 4\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {\n            \"week\": {\n                \"days\": {\n                    \"{{tomorrowDate}}\": [\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Прогулка на берегу моря\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        }\n                    ],\n                    \"04-07-2024\": [\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Ужин\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        }\n                    ],\n                    \"05-10-2023\": [\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Ужин\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        }\n                    ],\n                    \"28-09-2023\": [\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Ужин\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"version\": \"1.0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{stand}}webhook"
					},
					"response": []
				},
				{
					"name": "4.2  PLAN_tom_past",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var date = new Date();\r",
									"date.setDate(date.getDate() - 5); // Отниманием 5 дней от текущей дате\r",
									"\r",
									"var day = String(date.getDate()).padStart(2, '0');\r",
									"var month = String(date.getMonth() + 1).padStart(2, '0'); // Январь - это 0!\r",
									"var year = date.getFullYear();\r",
									"\r",
									"var formattedDate = day + '-' + month + '-' + year;\r",
									"\r",
									"pm.variables.set(\"pastDate\", formattedDate);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1. Проверка text\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверка наличия объекта\r",
									"    pm.expect(jsonData).to.have.property('response');\r",
									"    \r",
									"    // Проверка, что объект_тест является объектом\r",
									"    pm.expect(jsonData.response).to.be.an('object');\r",
									"    \r",
									"    // Проверка наличия ключа внутри объекта\r",
									"    pm.expect(jsonData.response).to.have.property('text');\r",
									"    pm.expect(jsonData.response).to.have.property('end_session');\r",
									"    \r",
									"    // Проверка значения ключа внутри объекта\r",
									"    pm.expect(jsonData.response.text).to.eql('У вас пока нет событий на завтра');\r",
									"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
									"    });\r",
									"    //-------------------------------------------------------------------------------\r",
									"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие объекта 'session' в ответе\r",
									"    pm.expect(jsonData).to.have.property('session'); \r",
									"   \r",
									"    // Проверяем наличие ключей внутри 'session'\r",
									"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
									"\t\r",
									"    // Проверяем, что значение ключей\r",
									"\t pm.expect(jsonData.session.message_id).to.equal(4);\r",
									"    \r",
									"});\r",
									"//-------------------------------------------------------------------------------\r",
									"\r",
									"pm.test(\"3. Проверка user_state_update\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"     // Дополнительные проверки значений\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time !== \"17:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '17:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time);\r",
									"    }\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name !== \"Прогулка на берегу моря\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name);\r",
									"    }\t\r",
									"\tif (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time !== \"14:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '14:00' для time в 2м элементе элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time);\t\r",
									"\t}\t\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name !== \"Поздний обед\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Поздний обед' для name в 2м элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name);\r",
									"    }\t\r",
									"\r",
									"//------------04-07-2024\r",
									"\r",
									"\tif (jsonData.user_state_update.week.days[\"04-07-2024\"][0].time !== \"17:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '17:00' для time в 1м элементе элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get(\"04-07-2024\")][0].time);\t\r",
									"\t}\t\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[\"04-07-2024\"][0].name !== \"Ужин\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Ужин' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get(\"04-07-2024\")][0].name);\r",
									"    }\r",
									"\t\r",
									"\t if (jsonData.user_state_update.week.days[\"04-07-2024\"][1].time !== \"20:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '20:00' для time во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get(\"04-07-2024\")][1].time);\t\r",
									"\t}\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[\"04-07-2024\"][1].name !== \"Велосипедная прогулка\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Велосипедная прогулка' для name во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get(\"04-07-2024\")][1].name);\r",
									"    }\r",
									"\r",
									"//------------05-10-2023\r",
									"\r",
									"    if (jsonData.user_state_update.week.days[\"05-10-2023\"][0].time !== \"17:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '17:00' для time в 1м элементе элементе, но получено\", jsonData.user_state_update.week.days[\"05-10-2023\"][0].time);\t\r",
									"\t}\t\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[\"05-10-2023\"][0].name !== \"Ужин\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Ужин' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[\"05-10-2023\"][0].name);\r",
									"    }\r",
									"\r",
									"    if (jsonData.user_state_update.week.days[\"05-10-2023\"][1].time !== \"20:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '20:00' для time в 2м элементе элементе, но получено\", jsonData.user_state_update.week.days[\"05-10-2023\"][1].time);\t\r",
									"\t}\t\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[\"05-10-2023\"][1].name !== \"Велосипедная прогулка\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Велосипедная прогулка' для name в 2м элементе, но получено\", jsonData.user_state_update.week.days[\"05-10-2023\"][1].name);\r",
									"    }\r",
									"\r",
									"//------------28-09-2023\r",
									"\r",
									"    if (jsonData.user_state_update.week.days[\"28-09-2023\"][0].time !== \"17:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '17:00' для time в 1м элементе элементе, но получено\", jsonData.user_state_update.week.days[\"28-09-2023\"][0].time);\t\r",
									"\t}\t\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[\"28-09-2023\"][0].name !== \"Ужин\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Ужин' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[\"28-09-2023\"][0].name);\r",
									"    }\r",
									"\r",
									"    if (jsonData.user_state_update.week.days[\"28-09-2023\"][1].time !== \"20:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '20:00' для time в 2м элементе элементе, но получено\", jsonData.user_state_update.week.days[\"28-09-2023\"][1].time);\t\r",
									"\t}\t\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[\"28-09-2023\"][1].name !== \"Велосипедная прогулка\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Велосипедная прогулка' для name в 2м элементе, но получено\", jsonData.user_state_update.week.days[\"28-09-2023\"][1].name);\r",
									"    }\t\r",
									"\r",
									" \r",
									"    // Проверяем наличие и тип user_state_update\r",
									"    pm.expect(jsonData).to.have.property('user_state_update');\r",
									"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип object3 внутри user_state_update\r",
									"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
									"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип days внутри week\r",
									"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип pastDate внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('pastDate'));\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.be.an('array');\r",
									"\t\r",
									"\t// Проверяем наличие и тип \"04-07-2024\" внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(\"04-07-2024\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"04-07-2024\"]).to.be.an('array');\r",
									"\r",
									"    // Проверяем наличие и тип \"05-10-2023\" внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(\"05-10-2023\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"05-10-2023\"]).to.be.an('array');\r",
									"\r",
									"    // Проверяем наличие и тип \"28-09-2023\" внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(\"28-09-2023\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"]).to.be.an('array');\r",
									"\r",
									"    // Проверяем, что 'pastDate' содержит 2 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.have.lengthOf(2);\r",
									"\r",
									"    // Проверяем, что \"04-07-2024\" содержит 2 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"04-07-2024\"]).to.have.lengthOf(2);\r",
									"\r",
									"    // Проверяем, что \"05-10-2023\" содержит 2 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"05-10-2023\"]).to.have.lengthOf(2);\r",
									"\r",
									"    // Проверяем, что \"28-09-2023\" содержит 2 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"]).to.have.lengthOf(2);\r",
									"\r",
									"    // Проверяем первый элемент 'pastDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('time', \"17:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('name', \"Прогулка на берегу моря\");\r",
									"\r",
									"    // Проверяем 150й элемент 'pastDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('time', \"14:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('name', \"Поздний обед\");\r",
									"\t\r",
									"\t// Проверяем первый элемент \"04-07-2024\"\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"04-07-2024\"][0]).to.have.property('time', \"17:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"04-07-2024\"][0]).to.have.property('name', \"Ужин\");\r",
									"\r",
									"    // Проверяем второй элемент \"04-07-2024\"\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"04-07-2024\"][1]).to.have.property('time', \"20:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"04-07-2024\"][1]).to.have.property('name', \"Велосипедная прогулка\");\r",
									"\r",
									"\t// Проверяем первый элемент \"05-10-2023\"\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"05-10-2023\"][0]).to.have.property('time', \"17:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"05-10-2023\"][0]).to.have.property('name', \"Ужин\");\r",
									"\r",
									"    // Проверяем второй элемент \"05-10-2023\"\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"05-10-2023\"][1]).to.have.property('time', \"20:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"05-10-2023\"][1]).to.have.property('name', \"Велосипедная прогулка\");\r",
									"\r",
									"    \t// Проверяем первый элемент \"28-09-2023\"\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"][0]).to.have.property('time', \"17:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"][0]).to.have.property('name', \"Ужин\");\r",
									"\r",
									"    // Проверяем второй элемент \"28-09-2023\"\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"][1]).to.have.property('time', \"20:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"][1]).to.have.property('name', \"Велосипедная прогулка\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"план на завтра\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 4\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {\n            \"week\": {\n                \"days\": {\n                    \"{{pastDate}}\": [\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Прогулка на берегу моря\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        }\n                    ],\n                    \"04-07-2024\": [\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Ужин\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        }\n                    ],\n                    \"05-10-2023\": [\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Ужин\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        }\n                    ],\n                    \"28-09-2023\": [\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Ужин\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"version\": \"1.0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{stand}}webhook"
					},
					"response": []
				},
				{
					"name": "4.3  PLAN_tom_fut",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1. Проверка text\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверка наличия объекта\r",
									"    pm.expect(jsonData).to.have.property('response');\r",
									"    \r",
									"    // Проверка, что объект_тест является объектом\r",
									"    pm.expect(jsonData.response).to.be.an('object');\r",
									"    \r",
									"    // Проверка наличия ключа внутри объекта\r",
									"    pm.expect(jsonData.response).to.have.property('text');\r",
									"    pm.expect(jsonData.response).to.have.property('end_session');\r",
									"    \r",
									"    // Проверка значения ключа внутри объекта\r",
									"    pm.expect(jsonData.response.text).to.eql('У вас пока нет событий на завтра');\r",
									"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
									"    });\r",
									"    //-------------------------------------------------------------------------------\r",
									"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие объекта 'session' в ответе\r",
									"    pm.expect(jsonData).to.have.property('session'); \r",
									"   \r",
									"    // Проверяем наличие ключей внутри 'session'\r",
									"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
									"\t\r",
									"    // Проверяем, что значение ключей\r",
									"\t pm.expect(jsonData.session.message_id).to.equal(4);\r",
									"    \r",
									"});\r",
									"//-------------------------------------------------------------------------------\r",
									"\r",
									"pm.test(\"3. Проверка user_state_update\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"     // Дополнительные проверки значений\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time !== \"17:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '17:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time);\r",
									"    }\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name !== \"Прогулка на берегу моря\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Прогулка на берегу моря' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name);\r",
									"    }\t\r",
									"\tif (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time !== \"14:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '14:00' для time в 2м элементе элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time);\t\r",
									"\t}\t\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name !== \"Поздний обед\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Поздний обед' для name в 2м элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name);\r",
									"    }\t\r",
									"\r",
									"\r",
									" \r",
									"    // Проверяем наличие и тип user_state_update\r",
									"    pm.expect(jsonData).to.have.property('user_state_update');\r",
									"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип object3 внутри user_state_update\r",
									"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
									"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип days внутри week\r",
									"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип futureDate внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('futureDate'));\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.be.an('array');\r",
									"\t\r",
									"\t\r",
									"    // Проверяем, что 'futureDate' содержит 2 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.have.lengthOf(2);\r",
									"\r",
									"    // Проверяем первый элемент 'futureDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('time', \"17:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('name', \"Прогулка на берегу моря\");\r",
									"\r",
									"    // Проверяем 150й элемент 'futureDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('time', \"14:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('name', \"Поздний обед\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Функция для форматирования даты\r",
									"function formatDate(date) {\r",
									"    var day = String(date.getDate()).padStart(2, '0');\r",
									"    var month = String(date.getMonth() + 1).padStart(2, '0');\r",
									"    var year = date.getFullYear();\r",
									"    return day + '-' + month + '-' + year;\r",
									"}\r",
									"\r",
									"// Завтрашняя дата\r",
									"var tomorrow = new Date();\r",
									"tomorrow.setDate(tomorrow.getDate() + 90);\r",
									"pm.variables.set(\"futureDate\", formatDate(tomorrow));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"план на завтра\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 4\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {\n            \"week\": {\n                \"days\": {\n                    \"{{futureDate}}\": [\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Прогулка на берегу моря\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        }\n                    ]                   \n                }\n            }\n        }\n    },\n    \"version\": \"1.0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{stand}}webhook"
					},
					"response": []
				},
				{
					"name": "4.4  PLAN_tom_list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Генерация текущей даты в формате DD-MM-YYYY\r",
									"\r",
									"function generateCurrentDate() {\r",
									"    var currentDate = new Date();\r",
									"    var day = String(currentDate.getDate()).padStart(2, '0');\r",
									"    var month = String(currentDate.getMonth() + 1).padStart(2, '0'); // Январь - это 0!\r",
									"    var year = currentDate.getFullYear();\r",
									"    return day + '-' + month + '-' + year;\r",
									"}\r",
									"//-------------------------------------------------------------------------------\r",
									"pm.test(\"1. Проверка text с currentDate\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // Создание регулярного выражения с текущей датой\r",
									"    var expectedPattern = new RegExp('^Ваши события на завтра ' + pm.variables.get('tomorrowDate') + \" 00:00 Поздний обед00, 01:00 Поздний обед01, 02:00 Поздний обед02, 03:00 Поздний обед03, 04:00 Поздний обед04, 10:00 Поздний обед10, 11:00 Поздний обед11, 12:00 Прогулка на берегу моря12, 14:00 Поздний обед14, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 14:00 Поздний обед, 17:00 Поздний обед17\");\r",
									"\r",
									"    // Проверка наличия объекта\r",
									"    pm.expect(jsonData).to.have.property('response');\r",
									"\r",
									"    // Проверка, что response является объектом\r",
									"    pm.expect(jsonData.response).to.be.an('object');\r",
									"\r",
									"    // Проверка наличия ключа внутри объекта\r",
									"    pm.expect(jsonData.response).to.have.property('text');\r",
									"    pm.expect(jsonData.response).to.have.property('end_session');\r",
									"\r",
									"    // Проверка значения ключа внутри объекта\r",
									"    pm.expect(jsonData.response.text).to.match(expectedPattern);\r",
									"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
									"\r",
									"});\r",
									"//-------------------------------------------------------------------------------\r",
									"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие объекта 'session' в ответе\r",
									"    pm.expect(jsonData).to.have.property('session'); \r",
									"   \r",
									"    // Проверяем наличие ключей внутри 'session'\r",
									"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
									"\t\r",
									"    // Проверяем, что значение ключей\r",
									"\t pm.expect(jsonData.session.message_id).to.equal(4);\r",
									"    \r",
									"});\r",
									"\r",
									"//-------------------------------------------------------------------------------\r",
									"\r",
									"\r",
									"pm.test(\"3. Проверка user_state_update -> tomorrowDate \", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"\r",
									"     // Дополнительные проверки значений\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][0].time !== \"12:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '12:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][0].time);\r",
									"    }\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][0].name !== \"Прогулка на берегу моря12\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Прогулка на берегу моря12' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][0].name);\r",
									"    }\r",
									"\t\r",
									"\t if (jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][98].time !== \"14:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '14:00' для time во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][98].time);\t\r",
									"\t}\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][98].name !== \"Поздний обед\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Поздний обед' для name в 99м элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][98].name);\r",
									"    }\r",
									"\t\r",
									"\r",
									"    // Проверяем наличие и тип user_state_update\r",
									"    pm.expect(jsonData).to.have.property('user_state_update');\r",
									"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип object3 внутри user_state_update\r",
									"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
									"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип days внутри week\r",
									"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип 'tomorrowDate' внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('tomorrowDate'));\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')]).to.be.an('array');\r",
									"\r",
									"    // Проверяем, что tomorrowDate содержит 99 элементов\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')]).to.have.lengthOf(99);\r",
									"\r",
									"    // Проверяем первый элемент tomorrowDate\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][0]).to.have.property('time', \"12:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][0]).to.have.property('name', \"Прогулка на берегу моря12\");\r",
									"\r",
									"    // Проверяем второй элемент tomorrowDate\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][98]).to.have.property('time', \"14:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('tomorrowDate')][98]).to.have.property('name', \"Поздний обед\");\r",
									"\r",
									"});\r",
									"//-------------------------------------------------------------------------------\r",
									"pm.test(\"4. Проверка user_state_update -> pastDate и futureDate\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"     // Дополнительные проверки значений\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time !== \"17:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '17:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time);\r",
									"    }\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name !== \"Ужин\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Ужин' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name);\r",
									"    }\t\r",
									"\tif (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][149].time !== \"20:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '20:00' для time в 150м элементе элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][149].time);\t\r",
									"\t}\t\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][149].name !== \"Велосипедная прогулка\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Велосипедная прогулка' для name в 152м элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][149].name);\r",
									"    }\t\r",
									"\r",
									"\tif (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time !== \"17:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '17:00' для time в 150м элементе элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time);\t\r",
									"\t}\t\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name !== \"Ужин\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Ужин' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name);\r",
									"    }\r",
									"\t\r",
									"\t if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time !== \"20:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '20:00' для time во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time);\t\r",
									"\t}\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name !== \"Велосипедная прогулка\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Велосипедная прогулка' для name во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name);\r",
									"    }\r",
									"\r",
									"    if (jsonData.user_state_update.week.days[\"28-09-2023\"][0].time !== \"17:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '17:00' для time в 150м элементе элементе, но получено\", jsonData.user_state_update.week.days[\"28-09-2023\"][0].time);\t\r",
									"\t}\t\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[\"28-09-2023\"][0].name !== \"Ужин\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Ужин' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[\"28-09-2023\"][0].name);\r",
									"    }\r",
									"\t\r",
									"\t if (jsonData.user_state_update.week.days[\"28-09-2023\"][1].time !== \"20:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '20:00' для time во втором элементе, но получено\", jsonData.user_state_update.week.days[\"28-09-2023\"][1].time);\t\r",
									"\t}\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[\"28-09-2023\"][1].name !== \"Велосипедная прогулка\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Велосипедная прогулка' для name во втором элементе, но получено\", jsonData.user_state_update.week.days[\"28-09-2023\"][1].name);\r",
									"    }\r",
									"\t\r",
									"    // Проверяем наличие и тип user_state_update\r",
									"    pm.expect(jsonData).to.have.property('user_state_update');\r",
									"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип object3 внутри user_state_update\r",
									"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
									"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип days внутри week\r",
									"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие и тип {{pastDate}} внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('pastDate'));\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.be.an('array');\r",
									"\t\r",
									"\t// Проверяем наличие и тип {{futureDate}} внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('futureDate'));\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.be.an('array');\r",
									"\r",
									"    // Проверяем наличие и тип \"28-09-2023\" внутри days\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(\"28-09-2023\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"]).to.be.an('array');\r",
									"\r",
									"    // Проверяем, что 'pastDate' содержит 152 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.have.lengthOf(150);\r",
									"\t\r",
									"\t// Проверяем, что 'futureDate' содержит 2 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.have.lengthOf(2);\r",
									"\r",
									"    // Проверяем, что \"28-09-2023\" содержит 2 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"]).to.have.lengthOf(2);\r",
									"\r",
									"    // Проверяем первый элемент 'pastDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('time', \"17:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('name', \"Ужин\");\r",
									"\r",
									"    // Проверяем 150й элемент 'pastDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][149]).to.have.property('time', \"20:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][149]).to.have.property('name', \"Велосипедная прогулка\");\r",
									"\t\r",
									"\t// Проверяем первый элемент 'futureDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('time', \"17:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('name', \"Ужин\");\r",
									"\r",
									"    // Проверяем второй элемент 'futureDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('time', \"20:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('name', \"Велосипедная прогулка\");\r",
									"\r",
									"\t// Проверяем первый элемент \"28-09-2023\"\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"][0]).to.have.property('time', \"17:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"][0]).to.have.property('name', \"Ужин\");\r",
									"\r",
									"    // Проверяем второй элемент \"28-09-2023\"'\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"][1]).to.have.property('time', \"20:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[\"28-09-2023\"][1]).to.have.property('name', \"Велосипедная прогулка\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Функция для форматирования даты\r",
									"function formatDate(date) {\r",
									"    var day = String(date.getDate()).padStart(2, '0');\r",
									"    var month = String(date.getMonth() + 1).padStart(2, '0');\r",
									"    var year = date.getFullYear();\r",
									"    return day + '-' + month + '-' + year;\r",
									"}\r",
									"\r",
									"// будущая дата\r",
									"var futureDate = new Date();\r",
									"futureDate.setDate(futureDate.getDate() + 90);\r",
									"pm.variables.set(\"futureDate\", formatDate(futureDate));\r",
									"\r",
									"// Дата в прошлом (например, 7 дней назад)\r",
									"var pastDate = new Date();\r",
									"pastDate.setDate(pastDate.getDate() - 90);\r",
									"pm.variables.set(\"pastDate\", formatDate(pastDate));\r",
									"\r",
									"// Текущая\r",
									"var curDate = new Date();\r",
									"curDate.setDate(curDate.getDate());\r",
									"pm.variables.set(\"curDate\", formatDate(curDate));\r",
									"\r",
									"// завтрашняя\r",
									"var date = new Date();\r",
									"date.setDate(date.getDate() + 1); // Добавляем 1 день к текущей дате\r",
									"\r",
									"var day = String(date.getDate()).padStart(2, '0');\r",
									"var month = String(date.getMonth() + 1).padStart(2, '0'); // Январь - это 0!\r",
									"var year = date.getFullYear();\r",
									"\r",
									"var formattedDate = day + '-' + month + '-' + year;\r",
									"\r",
									"pm.variables.set(\"tomorrowDate\", formattedDate);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"план на завтра\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 4\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {\n            \"week\": {\n                \"days\": {\n                   \"{{tomorrowDate}}\": [\n                        {\n                            \"time\": \"12:00\",\n                            \"name\": \"Прогулка на берегу моря12\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед14\"\n                        },\n                        {\n                            \"time\": \"11:00\",\n                            \"name\": \"Поздний обед11\"\n                        },\n                        {\n                            \"time\": \"10:00\",\n                            \"name\": \"Поздний обед10\"\n                        },\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Поздний обед17\"\n                        },\n                        {\n                            \"time\": \"00:00\",\n                            \"name\": \"Поздний обед00\"\n                        },\n                        {\n                            \"time\": \"01:00\",\n                            \"name\": \"Поздний обед01\"\n                        },\n                        {\n                            \"time\": \"02:00\",\n                            \"name\": \"Поздний обед02\"\n                        },\n                        {\n                            \"time\": \"03:00\",\n                            \"name\": \"Поздний обед03\"\n                        },\n                        {\n                            \"time\": \"04:00\",\n                            \"name\": \"Поздний обед04\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        },\n                        {\n                            \"time\": \"14:00\",\n                            \"name\": \"Поздний обед\"\n                        }\n                    ],\n                    \"{{pastDate}}\": [\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Ужин\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        }\n                    ],\n                    \"{{futureDate}}\": [\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Ужин\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        }\n                    ],\n                    \"28-09-2023\": [\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Ужин\"\n                        },\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        }\n                    ]\n                }\n            }\n        }\n    },\n    \"version\": \"1.0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{stand}}webhook"
					},
					"response": []
				},
				{
					"name": "4.5  PLAN_tom_empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"1. Проверка text\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверка наличия объекта\r",
									"    pm.expect(jsonData).to.have.property('response');\r",
									"    \r",
									"    // Проверка, что объект_тест является объектом\r",
									"    pm.expect(jsonData.response).to.be.an('object');\r",
									"    \r",
									"    // Проверка наличия ключа внутри объекта\r",
									"    pm.expect(jsonData.response).to.have.property('text');\r",
									"    pm.expect(jsonData.response).to.have.property('end_session');\r",
									"    \r",
									"    // Проверка значения ключа внутри объекта\r",
									"    pm.expect(jsonData.response.text).to.eql('У вас пока нет событий на завтра');\r",
									"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
									"    });\r",
									"    //-------------------------------------------------------------------------------\r",
									"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие объекта 'session' в ответе\r",
									"    pm.expect(jsonData).to.have.property('session'); \r",
									"   \r",
									"    // Проверяем наличие ключей внутри 'session'\r",
									"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
									"\t\r",
									"    // Проверяем, что значение ключей\r",
									"\t pm.expect(jsonData.session.message_id).to.equal(0);\r",
									"    \r",
									"});\r",
									"\r",
									"//-------------------------------------------------------------------------------\r",
									"pm.test(\"3. Проверка'days' {}\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие user_state_update в ответе\r",
									"    pm.expect(jsonData).to.have.property('user_state_update');\r",
									"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие week внутри user_state_update\r",
									"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
									"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
									"\r",
									"    // Проверяем наличие days внутри week\r",
									"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
									"\r",
									"    // Проверяем, что days является пустым объектом\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object').that.is.empty;   \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"original_utterance\": null,\n        \"command\": \"план на завтра\"\n    },\n    \"session\": {\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"message_id\": 0\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {\n            \"week\": {\n                \"days\": {\n                }\n            }\n        }\n    },\n    \"version\": \"1.0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{stand}}webhook"
					},
					"response": []
				}
			]
		},
		{
			"name": "5. План на неделю",
			"item": [
				{
					"name": "5.1  WEEKLY_PLAN_not_empty_mi1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"1. Проверка text\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    \r",
									"    // Создание регулярного выражения с текущей датой\r",
									"    var expectedPattern = new RegExp('^Ваши события ' + pm.variables.get('pastDate') + ' 17:00 Велосипедная прогулка, 20:00 Ужин, ' + pm.variables.get('curDate') + ' 17:00 Ужин, 17:01 Велосипедная прогулка, ' + pm.variables.get('futureDate') + ' 09:00 Поздний обед, 15:00 Прогулка на берегу моря');\r",
									"    \r",
									"    // Проверка наличия объекта\r",
									"    pm.expect(jsonData).to.have.property('response');\r",
									"    \r",
									"    // Проверка, что response является объектом\r",
									"    pm.expect(jsonData.response).to.be.an('object');\r",
									"    \r",
									"    // Проверка наличия ключа внутри объекта\r",
									"    pm.expect(jsonData.response).to.have.property('text');\r",
									"    \r",
									"    // Проверка значения ключа внутри объекта\r",
									"    pm.expect(jsonData.response.text).to.match(expectedPattern);   \r",
									"   \r",
									"});\r",
									"\r",
									"//-------------------------------------------------------------------------------\r",
									"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие объекта 'session' в ответе\r",
									"    pm.expect(jsonData).to.have.property('session'); \r",
									"   \r",
									"    // Проверяем наличие ключей внутри 'session'\r",
									"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
									"\t\r",
									"    // Проверяем, что значение ключей\r",
									"\t pm.expect(jsonData.session.message_id).to.equal(1);\r",
									"    \r",
									"});\r",
									"\r",
									"//-------------------------------------------------------------------------------\r",
									"pm.test(\"3. Проверка структуры ответа и значений в user_state_update\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"     // 3.1 Дополнительные проверки значений curDate\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('curDate')][0].time !== \"17:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '17:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('curDate')][0].time);\r",
									"    }\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('curDate')][0].name !== \"Ужин\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Ужин' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('curDate')][0].name);\r",
									"    }\r",
									"\t\r",
									"\tif (jsonData.user_state_update.week.days[pm.variables.get('curDate')][1].time !== \"17:01\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '17:01' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('curDate')][1].time);\r",
									"    }\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('curDate')][1].name !== \"Велосипедная прогулка\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Велосипедная прогулка' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('curDate')][1].name);\r",
									"    }\r",
									"\t\r",
									"\t// 3.2 Дополнительные проверки значений futureDate\r",
									"\t if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time !== \"15:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '15:00' для time во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time);\t\r",
									"\t}\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name !== \"Прогулка на берегу моря\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Прогулка на берегу моря' для name во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name);\r",
									"    }\r",
									"\t\r",
									"\t if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time !== \"09:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '09:00' для time во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time);\t\r",
									"\t}\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name !== \"Поздний обед\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name);\r",
									"    }\r",
									"\t// 3.3 Дополнительные проверки значений pastDate\r",
									"\t\r",
									"\t if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time !== \"20:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '20:00' для time во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].time);\t\r",
									"\t}\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name !== \"Ужин\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Ужин\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0].name);\r",
									"    }\t\r",
									"\t\r",
									"\t if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time !== \"17:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '17:00' для time во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].time);\t\r",
									"\t}\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name !== \"Велосипедная прогулка\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Велосипедная прогулка' для name во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1].name);\r",
									"    }\r",
									"\t\r",
									"\r",
									"    // 3.4 Проверяем наличие и тип user_state_update\r",
									"    pm.expect(jsonData).to.have.property('user_state_update');\r",
									"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
									"\r",
									"    // 3.5 Проверяем наличие и тип object3 внутри user_state_update\r",
									"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
									"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
									"\r",
									"    // 3.6 Проверяем наличие и тип days внутри week\r",
									"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
									"\r",
									"    // 3.7 Проверяем curDate, futureDate, pastDate внутри days\r",
									"\tpm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('curDate'));\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('curDate')]).to.be.an('array');\r",
									"\t\r",
									"\tpm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('futureDate'));\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.be.an('array');\r",
									"\t\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('pastDate'));\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.be.an('array');\r",
									"\t\r",
									"\t// 3.8 Проверяем, что 'curDate' содержит 2 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('curDate')]).to.have.lengthOf(2);\r",
									"\r",
									"    // 3.8.1 Проверяем первый элемент 'curDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('curDate')][0]).to.have.property('time', \"17:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('curDate')][0]).to.have.property('name', \"Ужин\");\r",
									"\r",
									"    // 3.8.2 Проверяем второй элемент 'curDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('curDate')][1]).to.have.property('time', \"17:01\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('curDate')][1]).to.have.property('name', \"Велосипедная прогулка\");\r",
									"\r",
									"\t\r",
									"\t// 3.9 Проверяем, что 'futureDate' содержит 2 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.have.lengthOf(2);\r",
									"\r",
									"    // 3.9.1 Проверяем первый элемент 'futureDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('time', \"15:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('name', \"Прогулка на берегу моря\");\r",
									"\r",
									"    // 3.9.2 Проверяем второй элемент 'futureDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('time', \"09:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('name', \"Поздний обед\");\t\r",
									"\r",
									"   \t// 3.10 Проверяем, что 'pastDate' содержит 2 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')]).to.have.lengthOf(2);\r",
									"\r",
									"    // 3.10.1 Проверяем первый элемент 'pastDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('time', \"20:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][0]).to.have.property('name', \"Ужин\");\r",
									"\r",
									"    // 3.10.2 Проверяем второй элемент 'pastDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('time', \"17:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('pastDate')][1]).to.have.property('name', \"Велосипедная прогулка\");\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Функция для форматирования даты\r",
									"function formatDate(date) {\r",
									"    var day = String(date.getDate()).padStart(2, '0');\r",
									"    var month = String(date.getMonth() + 1).padStart(2, '0');\r",
									"    var year = date.getFullYear();\r",
									"    return day + '-' + month + '-' + year;\r",
									"}\r",
									"\r",
									"// Завтрашняя дата\r",
									"var tomorrow = new Date();\r",
									"tomorrow.setDate(tomorrow.getDate() + 90);\r",
									"pm.variables.set(\"futureDate\", formatDate(tomorrow));\r",
									"\r",
									"// Дата в прошлом (например, 7 дней назад)\r",
									"var pastDate = new Date();\r",
									"pastDate.setDate(pastDate.getDate() - 90);\r",
									"pm.variables.set(\"pastDate\", formatDate(pastDate));\r",
									"\r",
									"// Текущая\r",
									"var curDate = new Date();\r",
									"curDate.setDate(curDate.getDate());\r",
									"pm.variables.set(\"curDate\", formatDate(curDate));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"original_utterance\": \"план на неделю\",\n        \"nlu\": {\n            \"entities\": [],\n            \"tokens\": [\n                \"план\",\n                \"на\",\n                \"неделю\"\n            ]\n        },\n        \"type\": \"SimpleUtterance\",\n        \"command\": \"план на неделю\"\n    },\n    \"meta\": {\n        \"interfaces\": {\n            \"screen\": {}\n        },\n        \"timezone\": \"Europe\\/Moscow\",\n        \"_city_ru\": \"Краснодар\",\n        \"locale\": \"ru_RU\",\n        \"client_id\": \"MailRu-VC\\/1.0\"\n    },\n    \"session\": {\n        \"new\": false,\n        \"application\": {\n            \"application_type\": \"web\",\n            \"application_id\": \"87837\"\n        },\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"skill_id\": \"52401ef1\",\n        \"message_id\": 1,\n        \"auth_token\": \"636\",\n        \"user\": {\n            \"user_id\": \"9fc847e3\"\n        }\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {\n            \"week\": {\n                \"days\": {\n                    \"{{futureDate}}\": [\n                        {\n                            \"time\": \"15:00\",\n                            \"name\": \"Прогулка на берегу моря\"\n                        },\n                        {\n                            \"time\": \"09:00\",\n                            \"name\": \"Поздний обед\"\n                        }\n                    ],\n                    \"{{pastDate}}\": [\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Ужин\"\n                        },\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        }\n                    ],\n                    \"{{curDate}}\": [\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Ужин\"\n                        },\n                        {\n                            \"time\": \"17:01\",\n                            \"name\": \"Велосипедная прогулка\"\n                        }\n                    ]\n                   \n                }\n            }\n        }\n    },\n    \"version\": \"1.0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{stand}}webhook"
					},
					"response": []
				},
				{
					"name": "5.2 WEEKLY_PLAN_not_empty_mi0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"1. Проверка text\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    \r",
									"    // Создание регулярного выражения с текущей датой\r",
									"    var expectedPattern = new RegExp('^Ваши события ' + pm.variables.get('curDate') + ' 17:00 Ужин, 17:01 Велосипедная прогулка, ' + pm.variables.get('futureDate') + ' 09:00 Поздний обед, 15:00 Прогулка на берегу моря');\r",
									"    \r",
									"    // Проверка наличия объекта\r",
									"    pm.expect(jsonData).to.have.property('response');\r",
									"    \r",
									"    // Проверка, что response является объектом\r",
									"    pm.expect(jsonData.response).to.be.an('object');\r",
									"    \r",
									"    // Проверка наличия ключа внутри объекта\r",
									"    pm.expect(jsonData.response).to.have.property('text');\r",
									"    \r",
									"    // Проверка значения ключа внутри объекта\r",
									"    pm.expect(jsonData.response.text).to.match(expectedPattern);   \r",
									"   \r",
									"});\r",
									"\r",
									"//-------------------------------------------------------------------------------\r",
									"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие объекта 'session' в ответе\r",
									"    pm.expect(jsonData).to.have.property('session'); \r",
									"   \r",
									"    // Проверяем наличие ключей внутри 'session'\r",
									"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
									"\t\r",
									"    // Проверяем, что значение ключей\r",
									"\t pm.expect(jsonData.session.message_id).to.equal(0);\r",
									"    \r",
									"});\r",
									"\r",
									"//-------------------------------------------------------------------------------\r",
									"pm.test(\"3. Проверка структуры ответа и значений в user_state_update\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"     // 3.1 Дополнительные проверки значений curDate\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('curDate')][0].time !== \"17:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '17:00' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('curDate')][0].time);\r",
									"    }\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('curDate')][0].name !== \"Ужин\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Ужин' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('curDate')][0].name);\r",
									"    }\r",
									"\t\r",
									"\tif (jsonData.user_state_update.week.days[pm.variables.get('curDate')][1].time !== \"17:01\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '17:01' для time в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('curDate')][1].time);\r",
									"    }\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('curDate')][1].name !== \"Велосипедная прогулка\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Велосипедная прогулка' для name в первом элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('curDate')][1].name);\r",
									"    }\r",
									"\t\r",
									"\t// 3.2 Дополнительные проверки значений futureDate\r",
									"\t if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time !== \"15:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '15:00' для time во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].time);\t\r",
									"\t}\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name !== \"Прогулка на берегу моря\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Прогулка на берегу моря' для name во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0].name);\r",
									"    }\r",
									"\t\r",
									"\t if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time !== \"09:00\") {\r",
									"        console.log(\"Ошибка: ожидалось значение '09:00' для time во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].time);\t\r",
									"\t}\r",
									"\t\r",
									"    if (jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name !== \"Поздний обед\") {\r",
									"        console.log(\"Ошибка: ожидалось значение 'Поздний обед' для name во втором элементе, но получено\", jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1].name);\r",
									"    }\r",
									"\t\r",
									"\r",
									"    // 3.4 Проверяем наличие и тип user_state_update\r",
									"    pm.expect(jsonData).to.have.property('user_state_update');\r",
									"    pm.expect(jsonData.user_state_update).to.be.an('object');\r",
									"\r",
									"    // 3.5 Проверяем наличие и тип object3 внутри user_state_update\r",
									"    pm.expect(jsonData.user_state_update).to.have.property('week');\r",
									"    pm.expect(jsonData.user_state_update.week).to.be.an('object');\r",
									"\r",
									"    // 3.6 Проверяем наличие и тип days внутри week\r",
									"    pm.expect(jsonData.user_state_update.week).to.have.property('days');\r",
									"    pm.expect(jsonData.user_state_update.week.days).to.be.an('object');\r",
									"\r",
									"    // 3.7 Проверяем curDate, futureDate, pastDate внутри days\r",
									"\tpm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('curDate'));\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('curDate')]).to.be.an('array');\r",
									"\t\r",
									"\tpm.expect(jsonData.user_state_update.week.days).to.have.property(pm.variables.get('futureDate'));\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.be.an('array');\r",
									"\t\r",
									"\t// 3.8 Проверяем, что 'curDate' содержит 2 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('curDate')]).to.have.lengthOf(2);\r",
									"\r",
									"    // 3.8.1 Проверяем первый элемент 'curDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('curDate')][0]).to.have.property('time', \"17:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('curDate')][0]).to.have.property('name', \"Ужин\");\r",
									"\r",
									"    // 3.8.2 Проверяем второй элемент 'curDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('curDate')][1]).to.have.property('time', \"17:01\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('curDate')][1]).to.have.property('name', \"Велосипедная прогулка\");\r",
									"\r",
									"\t\r",
									"\t// 3.9 Проверяем, что 'futureDate' содержит 2 элемента\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')]).to.have.lengthOf(2);\r",
									"\r",
									"    // 3.9.1 Проверяем первый элемент 'futureDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('time', \"15:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][0]).to.have.property('name', \"Прогулка на берегу моря\");\r",
									"\r",
									"    // 3.9.2 Проверяем второй элемент 'futureDate'\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('time', \"09:00\");\r",
									"    pm.expect(jsonData.user_state_update.week.days[pm.variables.get('futureDate')][1]).to.have.property('name', \"Поздний обед\");\t \r",
									"\r",
									"   \r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Функция для форматирования даты\r",
									"function formatDate(date) {\r",
									"    var day = String(date.getDate()).padStart(2, '0');\r",
									"    var month = String(date.getMonth() + 1).padStart(2, '0');\r",
									"    var year = date.getFullYear();\r",
									"    return day + '-' + month + '-' + year;\r",
									"}\r",
									"\r",
									"// Завтрашняя дата\r",
									"var tomorrow = new Date();\r",
									"tomorrow.setDate(tomorrow.getDate() + 90);\r",
									"pm.variables.set(\"futureDate\", formatDate(tomorrow));\r",
									"\r",
									"// Дата в прошлом (например, 7 дней назад)\r",
									"var pastDate = new Date();\r",
									"pastDate.setDate(pastDate.getDate() - 90);\r",
									"pm.variables.set(\"pastDate\", formatDate(pastDate));\r",
									"\r",
									"// Текущая\r",
									"var curDate = new Date();\r",
									"curDate.setDate(curDate.getDate());\r",
									"pm.variables.set(\"curDate\", formatDate(curDate));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"original_utterance\": \"план на неделю\",\n        \"nlu\": {\n            \"entities\": [],\n            \"tokens\": [\n                \"план\",\n                \"на\",\n                \"неделю\"\n            ]\n        },\n        \"type\": \"SimpleUtterance\",\n        \"command\": \"план на неделю\"\n    },\n    \"meta\": {\n        \"interfaces\": {\n            \"screen\": {}\n        },\n        \"timezone\": \"Europe\\/Moscow\",\n        \"_city_ru\": \"Краснодар\",\n        \"locale\": \"ru_RU\",\n        \"client_id\": \"MailRu-VC\\/1.0\"\n    },\n    \"session\": {\n        \"new\": false,\n        \"application\": {\n            \"application_type\": \"web\",\n            \"application_id\": \"87837\"\n        },\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"skill_id\": \"52401ef1\",\n        \"message_id\": 0,\n        \"auth_token\": \"636\",\n        \"user\": {\n            \"user_id\": \"9fc847e3\"\n        }\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {\n            \"week\": {\n                \"days\": {\n                    \"{{futureDate}}\": [\n                        {\n                            \"time\": \"15:00\",\n                            \"name\": \"Прогулка на берегу моря\"\n                        },\n                        {\n                            \"time\": \"09:00\",\n                            \"name\": \"Поздний обед\"\n                        }\n                    ],\n                    \"{{pastDate}}\": [\n                        {\n                            \"time\": \"20:00\",\n                            \"name\": \"Ужин\"\n                        },\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Велосипедная прогулка\"\n                        }\n                    ],\n                    \"{{curDate}}\": [\n                        {\n                            \"time\": \"17:00\",\n                            \"name\": \"Ужин\"\n                        },\n                        {\n                            \"time\": \"17:01\",\n                            \"name\": \"Велосипедная прогулка\"\n                        }\n                    ]\n                   \n                }\n            }\n        }\n    },\n    \"version\": \"1.0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{stand}}webhook"
					},
					"response": []
				},
				{
					"name": "5.3 WEEKLY_PLAN_empty",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Проверка наличия ключа и его значения внутри объекта\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверка наличия объекта\r",
									"    pm.expect(jsonData).to.have.property('response');\r",
									"    \r",
									"    // Проверка, что объект_тест является объектом\r",
									"    pm.expect(jsonData.response).to.be.an('object');\r",
									"    \r",
									"    // Проверка наличия ключа внутри объекта\r",
									"    pm.expect(jsonData.response).to.have.property('text');\r",
									"    pm.expect(jsonData.response).to.have.property('end_session');\r",
									"    \r",
									"    // Проверка значения ключа внутри объекта\r",
									"    pm.expect(jsonData.response.text).to.eql('У вас пока нет событий на этой неделе');\r",
									"    pm.expect(jsonData.response.end_session).to.eql(false);\r",
									"});\r",
									"//-------------------------------------------------------------------------------\r",
									"  pm.test(\"2. Значение ключей 'message_id' внутри 'session'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    \r",
									"    // Проверяем наличие объекта 'session' в ответе\r",
									"    pm.expect(jsonData).to.have.property('session'); \r",
									"   \r",
									"    // Проверяем наличие ключей внутри 'session'\r",
									"\tpm.expect(jsonData.session).to.have.property('message_id');\r",
									"\t\r",
									"    // Проверяем, что значение ключей\r",
									"\t pm.expect(jsonData.session.message_id).to.equal(1);\r",
									"    \r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"request\": {\n        \"original_utterance\": \"план на неделю\",\n        \"nlu\": {\n            \"entities\": [],\n            \"tokens\": [\n                \"план\",\n                \"на\",\n                \"неделю\"\n            ]\n        },\n        \"type\": \"SimpleUtterance\",\n        \"command\": \"план на неделю\"\n    },\n    \"meta\": {\n        \"interfaces\": {\n            \"screen\": {}\n        },\n        \"timezone\": \"Europe\\/Moscow\",\n        \"_city_ru\": \"Краснодар\",\n        \"locale\": \"ru_RU\",\n        \"client_id\": \"MailRu-VC\\/1.0\"\n    },\n    \"session\": {\n        \"new\": false,\n        \"application\": {\n            \"application_type\": \"web\",\n            \"application_id\": \"87837\"\n        },\n        \"user_id\": \"{{user_id}}\",\n        \"session_id\": \"{{session_id}}\",\t\n        \"skill_id\": \"52401ef1\",\n        \"message_id\": 1,\n        \"auth_token\": \"636\",\n        \"user\": {\n            \"user_id\": \"9fc847e3\"\n        }\n    },\n    \"state\": {\n        \"session\": {},\n        \"user\": {}\n    },\n    \"version\": \"1.0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{stand}}webhook"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.request.headers.add({\r",
					"    key: \"user-agent\",\r",
					"    value: pm.collectionVariables.get(\"user_agent\")\r",
					"});\r",
					"\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.test(\"0.1 Ответ должен содержать код статуса успеха и тело в формате json\", function() {\r",
					"    pm.expect(pm.response.code).to.be.oneOf([200]); // код ответа должен быть успешным\r",
					"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
					"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON    \r",
					"});\r",
					"\r",
					"//-------------------------------------------------------------------------------\r",
					"pm.test(\"0.2 Значение ключей user_id, session_id внутри 'session'\", function () {\r",
					"    var jsonData = pm.response.json();\r",
					"\r",
					"    // Получаем значение user_id\r",
					"    var user_id_per  = jsonData.session.user_id;\r",
					"\r",
					"    if (user_id_per === \"b4fde534\") {\r",
					"        // Проверяем, что user_id имеет b4fde534, а session_id - ffb392fd\r",
					"\t\tpm.expect(jsonData.session.user_id).to.equal('b4fde534');\r",
					"\t\tpm.expect(jsonData.session.session_id).to.equal('ffb392fd');\r",
					"        \r",
					"    } else if (user_id_per === \"8783711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\") {\r",
					"        // Проверяем, что user_id имеет , а session_id - значение_max\r",
					"\t\tpm.expect(jsonData.session.user_id).to.equal('8783711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111');\r",
					"\t\tpm.expect(jsonData.session.session_id).to.equal('b6dc6eee1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111');\r",
					"       \r",
					"    } else {\r",
					"        // Если user_id не соответствует ни одному из ожидаемых значений\r",
					"        pm.expect.fail(\"user_id имеет неожиданное значение: \" + user_id_per);\r",
					"    }\r",
					"});\r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "stand",
			"value": "https://searchyourbestjob.com/",
			"type": "string"
		},
		{
			"key": "user_agent",
			"value": "MailRu-VC/1.0",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": "b4fde534",
			"type": "string"
		},
		{
			"key": "session_id",
			"value": "ffb392fd",
			"type": "string"
		},
		{
			"key": "user_id_max",
			"value": "8783711111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
			"type": "string"
		},
		{
			"key": "session_id_max",
			"value": "b6dc6eee1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
			"type": "string"
		}
	]
}